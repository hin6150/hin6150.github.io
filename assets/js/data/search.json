[ { "title": null, "url": "/posts/2023-05-18-Spring-Boot-01/", "categories": "", "tags": "", "date": "2023-05-28 23:27:57 +0900", "snippet": "미리보기start.spring.io를 통해 간편하게 스프링 부트를 시작 할 수 있음.스프링 부트 3.0 이상 부터는 Java 17 필요.static/index.html 을 올려두면 Welcome page 기능을 제공한다.Controller을 통해 스프링 부트 제어가능.이후 getMapping(url)을 통해 특정 url 감지return “값”을 통해 static/값.html 반환관련 Controller이 존재하지 않으면 Mapping(url)으로 자동으로 이동.@ResponsiveBody의 경우 HTTP의 BODY에 문자 내용을 직접 반환기존에는 viewResolver가 실행되는 반면, ResponsiveBody의 경우 HttpMessageConverter가 동작.Optional&lt;&gt; Null이 반환될 수도 있는 형식.Spring?스프링은 자바 기반의 프레임 워크다.자바는 객체 지향언어이고 스프링은 이를 극대화 한 프레임 워크다.다향성이란?역할(인터페이스)과 구현의 구분역할은 사람과 차로 예시를 들면, 사람의 역할과 차의 역할이 존재한다. 이때, 차의 구현은 K3, 아반떼 등 다양하게 가능하고, 이를 교체한다고해서 사람이 차의 역할을 사용하지 못하는 것이 아니다.따라서 스프링에서는 인터페이스를 잘 구현하게 되면 상황에 따라 손쉽게 필요한 내용을 그때 그때 가져다 쓰는 것이 가능하다.SOLID" }, { "title": null, "url": "/posts/2023-05-15-React-01/", "categories": "", "tags": "", "date": "2023-05-28 23:27:57 +0900", "snippet": "리엑트란?리엑트를 사용하는 이유는 Single Page Application(SPA)때문이라고 합니다.간단하게 이야기하면 오직 하나의 HTML을 사용한다는 겁니다.그렇기에 페이지에 변화가 생긴다면 단순히 해당 부분에 대한 변경을 통해 별도의 새로고침 없이 페이지의 내용을 변경해줍니다.또한, JSX라는 문법을 통해서 쉽고 간편하게 html을 보관할 수 있습니다.리엑트 설치 해당 [링크][0]에서 Node.Js LTS 버전을 설치합니다. 해당 [링크][1]에서 vsCode 에디터를 설치합니다. 앞으로 리엑트를 개발할 폴더를 생성합니다. 해당 폴더를 vsCode 에디터에서 엽니다. 상단에 있는 Terminal -&gt; New Terminal을 통해 터미널을 엽니다. 다음과 같은 명령어를 입력합니다.npx create-react-app .해당 단계를 잘 따라오셨으면 설치 중이라는 메세지가 뜬 이후 아래의 명령어를 입력해 react를 실행 시킬 수 있습니다.npm start리엑트 써보기자 그러면 작업 폴더 내부에 src/App.js 라는 파일을 수정해봅시다.//App.js 파일import \"./App.css\";function App() { return ( &lt;div className=\"container\"&gt; &lt;p&gt;안녕하세요! &lt;/p&gt; &lt;/div&gt; );}export default App;위와 같이 수정한 뒤 저장을 하면 npm start를 입력할 당시 생성된 창(http://localhost:3000/)에서 우리가 입력한 “안녕하세요!”가 출력되는 것을 확인 할 수 있습니다.결국 return 안에 있는 html이 출력되는 것을 확인 할 수 있습니다.마찬가지로 /src/App.css의 내용을 다음과 같이 수정하면 css 또한 손쉽게 적용 되는 것을 확인 할 수 있습니다..container { width: 100%; height: 50vh; color: #fff; background-color: blueviolet; text-align: center;}자, 그러면 공통사항을 확인해 보았으니, 이제 차이점을 확인해봅시다. 먼저 class 대신, className을 사용합니다. {}를 이용해 변수를 html에 넣을 수 있습니다.이는 아래 예시를 통해서 확인하겠습니다.import \"./App.css\";function App() { const 인사말 = \"안녕하세요\"; return ( &lt;div className=\"container\"&gt; &lt;p&gt;{인사말}&lt;/p&gt; &lt;/div&gt; );}export default App;간단하게 인사말이라는 변수를 설정한 뒤 {}를 통해 미리 저장한 변수를 p태그의 내용으로 설정 할 수 있습니다.마찬가지로 className도 같은 방식으로 설정이 가능합니다. 이와 비슷하게 style도 적용 할 수 있습니다.다만 조금의 차이점은, style = {} 안에 {} 자료형으로 넣으면 됩니다.&lt;div style=&gt; 글씨 &lt;/div&gt;useState리엑트는 아래와 같이 state를 사용하여 데이터를 저장 할 수 있습니다.import { useState } from \"react\";import \"./App.css\";function App() { const [인사말, 인사말정하기] = useState(\"안녕하세요\"); return ( &lt;div className=\"container\"&gt; &lt;p&gt;{인사말}&lt;/p&gt; &lt;/div&gt; );}export default App;이러한 state의 특징은 실시간으로 state의 변화를 감지하여 렌더링해준다는 점입니다.이후 추후에 onClick와 같은 기능을 이용해 state의 값을 변경하면 이를 감지해 html의 값을 변경 할 수 있습니다.그리고 useState를 사용할 때 배열 형식으로 2개의 변수를 지정한다는 점을 확인하셨나요?첫번째 index의 변수는 해당 useState의 값을 뜻하고, 두번째 index의 변수는 해당 useState의 값을 변경하는 함수입니다.이에, 위의 예제에서 “인사말정하기”와 같은 함수를 사용해 “안녕하세요”를 다음과 같이 바꿀 수 있습니다.인사말정하기(\"반갑습니다.\");아래는 이를 활용하는 간단한 버튼 예제입니다.import { useState } from \"react\";import \"./App.css\";function App() { const [인사말, 인사말정하기] = useState(\"안녕하세요\"); return ( &lt;div className=\"container\"&gt; &lt;p&gt;{인사말}&lt;/p&gt; &lt;button onClick={() =&gt; { 인사말정하기(\"반갑습니다\"); }} &gt; 인사말 바꾸는 버튼 &lt;/button&gt; &lt;/div&gt; );}export default App;useEffect리엑트는 useEffect를 이용해 상태변화를 감지 할 수 있습니다.useEffect(() =&gt; { first; return () =&gt; { second; };}, [third]);useEffect는 위와 같은 형태를 띄고 있으며 first는 컴포넌트가 mount 될 때, return은 unMount될때 작동한다.그리고 third 배열 값을 이용해 특정 값이 변할 때 코드를 실행 시킬 수 있다.[0] : https://nodejs.org/ko[1] : https://code.visualstudio.com/Download" }, { "title": "Typescript 01", "url": "/posts/TypeScript-01/", "categories": "", "tags": "", "date": "2023-05-28 00:00:00 +0900", "snippet": "Typescript자바스크립트에서는 5 - ‘3’과 같은 연산이 가능합니다.JS에서 간편하게 알맞은 타입으로 변환시켜주기에, 엄격하게 타입을 설정하지 않고 사용이 가능합니다.다만, 이런 방식은 JS조차 무슨 이유로 에러가 발생하였는지 확실하게 알지 못하기에 프로젝트가 커질 수록 장점이 아닌, 단점으로 적용합니다.그렇기에 타입스크립트에서는 5 - ‘3’과 같은 연산이 불가능하지만, 명확하지 않은 타입에서 “숫자와 문자의 연산은 불가능 합니다.”와 같이 명확하게 문제점을 알려줍니다.리엑트에서 타입 스크립트 사용하기npx create-react-app 프로젝트명 –template typescript" }, { "title": "JavaScript 입문 2", "url": "/posts/Javascript-02/", "categories": "Web, JavaScript", "tags": "Javascript, HowTo, FrontEnd", "date": "2023-05-08 07:57:20 +0900", "snippet": "querySelectorAll()기존 querySelector을 이용해 하나의 요소를 가져올 수 있었습니다.그렇다면, query에 선택되는 요소들을 모두 가져오려는 경우는 어떻게 할까요?네 맞습니다. querySelectorAll을 이용해 가져오면 되겠죠.다만 querySelectorAll을 배우기 전에 먼저 querySelector을 이용해 수정을 적용하는 방법에 대해서 알아봐야 합니다.우리는 document에 querySelctor을 적용해 특정 요소를 가져옵니다.이후 해당 요소에 .style과 같은 값을 변경하게 되죠.그렇다면, 마찬가지로 querySelectorAll을 이용해 모두 가져와 변경하려면 가져온 요소들에 .style값을 변경하면 될까요?정답은 ‘아니다’입니다.컴퓨터는 querySelectorAll을 통해서 모든 요소를 가져왔는데 이를 배열([]) 이라는 바구니로 가져옵니다.그렇기에 document.querySelectorAll().style 같은 형식으로 적용하게 되면, 바구니에 style을 적용하려는 형식이기에 에러가 발생합니다.따라서 우리는 명확하게 컴퓨터에게 어떤 작업을 수행하려고 하는지 전달해줘야합니다.예를 들어서 가져온 모든 요소 중 첫번째 요소를 바꾸려면 아래와 같이 전달해야 합니다.document.querySelectorAll(\".container-text\")[0].style.color = \"white\";위의 코드는 class가 container-text인 요소들을 모두 가져와 그 중 0번째 즉, 1번째 요소의 color을 white로 변경하는 코드입니다. 컴퓨터는 1번째 요소를 0번이라고 부릅니다. 따라서 2번째 요소는 1번 요소가 되는거죠.querySelectorAll 예제아래는 list형식의 쇼핑 목록 html 예제 코드 입니다.&lt;ul class=\"list-container\"&gt; &lt;li class=\"list-item\"&gt;맨투맨 티셔츠&lt;/li&gt; &lt;li class=\"list-item\"&gt;스니커즈 신발&lt;/li&gt; &lt;li class=\"list-item\"&gt;청바지&lt;/li&gt; &lt;li class=\"list-item\"&gt;맨투맨 티셔츠&lt;/li&gt;&lt;/ul&gt;해당 목록에는 첫번째와 마지막에 맨투맨 티셔츠가 중복으로 들어와 있습니다.마지막 요소인 맨투맨 티셔츠를 후드티로 바꿔야 합니다.먼저 코드를 작성하기 전에 해야되는 작업이 하나 있습니다.내가 작성해야 되는 내용을 정리하고 코드를 작성하는 것이 좋기에 간략하게 문제 해결 방법을 적어보겠습니다.html 문서에서 list-item들을 모두 가져온 뒤, 그 중 4번째 요소의 내부 html을 “후드티”로 변경한다.Javascript에서는 아래와 같습니다.document.querySelectorAll(\".list-item\")[3].innerHTML = \"후드티\"; 앞서 말씀드린것과 같이 1번째 요소가 0번이므로, 4번째 요소는 컴퓨터에게 3번입니다.if - else 조건문자, 그렇다면 innerHTML 요소가 청바지인 item을 반바지로 바꿀 수 있을까요?마찬가지로 querySelectorAll()[2]번째 요소를 변경하면 작동하겠지만, 이번에는 조금 더 프로그래머스럽게 작성해보겠습니다.바로 조건문을 통해서, innerHTML 요소가 청바지면, item을 변경하는 것이죠.조건문은 다음과 같은 형식으로 작성합니다.if(조건식) { 조건식이 참인경우 실행} else { 조건식이 거짓인 경우 실행}여기서 조건식은 ‘요소의 innerHTML이 “청바지”와 같으면(==)’정도로 정의 할 수 있습니다.if (document.querySelectorAll(\".list-item\")[0].innerHTML == \"청바지\") { document.querySelectorAll(\".list-item\")[0].innerHTML = \"반바지\";}if (document.querySelectorAll(\".list-item\")[1].innerHTML == \"청바지\") { document.querySelectorAll(\".list-item\")[1].innerHTML = \"반바지\";}if (document.querySelectorAll(\".list-item\")[2].innerHTML == \"청바지\") { document.querySelectorAll(\".list-item\")[2].innerHTML = \"반바지\";}if (document.querySelectorAll(\".list-item\")[3].innerHTML == \"청바지\") { document.querySelectorAll(\".list-item\")[3].innerHTML = \"반바지\";}자, 여기까지 잘 따라오신분이면 위의 코드를 보고 떠오르는 내용이 하나 있어야 합니다.바로 코드가 불필요하게 중복되어 있다는 점이죠.이를 해결하기 위해 우리가 배웠던 function을 이용해 다음과 같이 작성할 수도 있겠네요 !function changeName(index) { if (document.querySelectorAll(\".list-item\")[index].innerHTML == \"청바지\") { document.querySelectorAll(\".list-item\")[index].innerHTML = \"반바지\"; }}changeName(0);changeName(1);changeName(2);changeName(3);변수이렇게 if문과 function을 이용했음에도 코드가 길어보입니다.이를 조금 더 축소 시킬 수 있을까요?이를 위해서 변수를 이용해 값을 저장하는 법에 대해서 알아보겠습니다.변수는 자주 사용하는 자료의 값을 저장 할 수 있습니다.예를 들어서, 내가 “안녕하세요 저는 자바스크립트를 배우고 있습니다.”라는 인사말을 저장하고 싶다면 다음과 같이 저장해서 쉽게 꺼내 쓸 수 있습니다.var 이름 = \"안녕하세요 저는 자바스크립트를 배우고 있습니다.\";요소.innerHTML = 이름;이런식으로 미리 지정된 변수 이름을 통해 손쉽게 값을 저장하고 사용 할 수 있습니다.그렇다면 쇼핑 list에서 아래와 같이 요소를 변수에 저장해 사용 할 수 있겠네요 !function changeName(index) { var item = document.querySelectorAll(\".list-item\")[index]; if (item.innerHTML == \"청바지\") { item.innerHTML = \"반바지\"; }}changeName(0);changeName(1);changeName(2);changeName(3);이외에도 숫자 값을 넣은 뒤 간단한 연산을 진행 할 수도 있습니다.var count = 0;//count에 count+1을 저장하는 3가지 방법;count = count + 1;count++;count += 1;for 반복문function을 이용했음에도 코드가 불필요하게 반복되어있다고 생각됩니다.이러한 문제를 해결하기 위해 반복문을 이용 할 수 있습니다.반복문은 다음과 같은 형식으로 사용합니다.for(변하는 값 초기화; 조건식; 값 증가 및 감소 식){ 반복되는 내용}간단하게 설명하면, 변수를 정의 한 뒤, 해당 변수가 조건식을 만족할 때 까지 증가 및 감소하는 식을 매 반복때마다 적용하는 형식입니다.아래는 변수가 3보다 작을때 까지 증가하는 반복문 입니다.for (var i = 0; i &lt; 3; i++) { 반복되는 내용}// 1. 처음 i 값은 0이므로 0 &lt; 3은 참이기에 반복되는 내용 실행// 2. 이후 i 값은 0 + 1이므로 1 &lt; 3은 참이기에 반복되는 내용 실행// 3. 이후 i 값은 1 + 1이므로 2 &lt; 3은 참이기에 반복되는 내용 실행// 4. 이후 i 값은 2 + 1이므로 3 &lt; 3은 거짓이기에 반복문 종료//따라서 1,2,3과 같이 3번 실행된다.그렇다면 list-item에도 반복문을 적용할 수 있을까요?반복문을 사용하기 좋은 경우는 증가 및 감소 식에 맞는 특정한 규칙이 필요합니다.예를 들어서 2, 4, 6과 같이 2씩 증가하는 변수를 사용하는 경우나, 함수에 0,1,2 와 같은 값을 반복해서 전달해야 하는 경우입니다.아래는 list-item을 반복문을 이용해 출력한 경우입니다.function changeName(index) { var item = document.querySelectorAll(\".list-item\")[index]; if (item.innerHTML == \"청바지\") { item.innerHTML = \"반바지\"; }}for (var i = 0; i &lt; 4; i++) { changeName(i);}i값이 4보다 작을동안 i값이 증가하면서 반복한다. 이때, changeName에 i 값을 전달해줍니다.즉, 기존과 같이 changeName(0),changeName(1), changeName(2), changeName(3)을 수행하게 됩니다.JavaScript 예제자, 그러면 이제 우리는 JavaScript에서 HTML 요소를 가져와 수정 하는 방법을 배웠습니다.querySelector, getElementById 등 특정 요소들을 가져와 style.color, innerHTML 등의 방법으로 요소를 수정 할 수 있었습니다.그리고 for 반복문, if 반복문, var 변수, function 함수 등 다양한 JS 기능들을 배웠습니다.이제 이러한 기능들을 활용해 보는 예제 풀이를 진행해봅니다.간단한 다크모드 문제상황 : 버튼을 누르면 count 클래스의 값이 1씩 증가합니다.count 클래스의 값이 홀수이면 컨테이너 박스의 색상이 검정색으로, 글자 색은 하얀색으로 바뀝니다.count 클래스의 값이 짝수이면 컨테이너 박스의 색상이 흰색으로, 글자색이 검정색으로 바뀝니다.다음과 같은 코드에서 script 부분을 작성해주세요.&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;테스트&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;p class=\"count\"&gt;0&lt;/p&gt; &lt;button class=\"btn-click\"&gt;클릭&lt;/button&gt; &lt;/div&gt; &lt;/body&gt; &lt;style&gt; .container { width: 100%; height: 100vh; background-color: #eee; } p { font-size: 24px; } .btn-click { width: 30%; } &lt;/style&gt; &lt;script&gt;&lt;/script&gt;&lt;/html&gt;저는 아래와 같이 구현했습니다.document.querySelector(\".btn-click\").addEventListener(\"click\", function () { document.querySelector(\".count\").innerHTML++; // var number = Number(document.querySelector(\".count\").innerHTML); // number += 1; // document.querySelector(\".count\").innerHTML = number; if (document.querySelector(\".count\").innerHTML % 2 == 0) { document.querySelector(\".container\").style.backgroundColor = \"white\"; document.querySelector(\".container\").style.color = \"black\"; } else { document.querySelector(\".container\").style.backgroundColor = \"black\"; document.querySelector(\".container\").style.color = \"white\"; }});중간에 주석처리 한 부분은 html이 문자(string)여서 숫자로(number)으로 변환하여 +=1 처리 해주는 부분입니다.++으로 계산 시 자동으로 형변환(문자에서 숫자로 변환)이 되어 작동합니다.여기서 중요한 점은 3가지 정도가 있습니다. 버튼이 눌러졌을 때, 상황(evnet)이 발생한다는 점. 버튼이 눌러졌을 때 count 값이 올라간다는 점. count 값의 짝수, 홀수에 따라 container의 style이 변한다는 점.상세하게 설명하자면, 모든 변화는 사용자가 버튼이 눌러졌을 때 발생하고, 그 이후 바로 count 값이 올라간 뒤 count 값에 따라 style이 변한다는 점입니다.따라서, 모든 event는 click listener안에서 동작해야합니다.입력에 따른 별 생성 문제상황 : 사용자가 입력한 수에 따라 “*“으로 이루어진 탑이 star 클래스의 자식으로 생성된다.(Ex: 3을 입력시 아래와 같은 탑이 생성된다.) ****** 값이 바뀌면 기존의 “*“들은 삭제되고 입력한 수에 따른 “*“이 다시 생성된다. 이때, 홀수번째 별은 붉은색 짝수번째 별은 푸른색으로 설정한다. html은 다음과 같습니다.&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;별 생성하기&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;input type=\"number\" min=\"0\" class=\"count\" /&gt; &lt;/div&gt; &lt;div class=\"star\"&gt;&lt;/div&gt; &lt;/body&gt; &lt;script&gt;&lt;/script&gt;&lt;/html&gt; Tip 필요한 능력for 반복문, if 조건문, 입력 이벤트 리스너javascript 컴포넌트 자식 지우기javascript input 값 가져오기javascript 요소 생성 및 추가하기javascript 문자열 반복하기예시 답안은 다음과 같습니다.혼자 풀어봐야 실력이 늡니다.document.querySelector(\".count\").addEventListener(\"input\", function () { document.querySelector(\".star\").innerHTML = \"\"; const input = document.querySelector(\".count\").value; for (var i = 0; i &lt; input; i++) { const star = document.createElement(\"p\"); star.innerHTML = \"*\".repeat(i + 1); if (i % 2 == 1) { star.style.color = \"red\"; } else { star.style.color = \"blue\"; } document.querySelector(\".star\").append(star); }});예제를 잘 풀었을까요?어려우신 분들도 있으실거고 잘 해결하신 분들도 계실거라고 생각됩니다.개인적으로 자바스크립트는 결국 지금까지 배운 내용의 반복이라고 생각합니다.문법을 배우고, 이를 응용하는 간단한 반복이죠.그래서 결국 프로그래밍적인 사고를 하실 줄 알게된다면 앞으로 배워나가는데 문제가 없으리라 생각합니다.간단하게 정리하자면, 문제상황을 파악하고 해당 문제를 해결하기 위해 컴퓨터에게 구체적인 명령을 내릴줄 알아야 합니다.자바스크립트부터는 전부 적기에는 내용이 방대하여 이만 줄이겠습니다." }, { "title": "JavaScript 입문 1", "url": "/posts/Javascript-01/", "categories": "Web, JavaScript", "tags": "Javascript, HowTo, FrontEnd", "date": "2023-05-04 16:11:23 +0900", "snippet": "많은 사람들이 FrontEnd의 기초는 HTML,CSS 그리고 JavaScript를 이야기합니다.해당 포스팅에서는 HTML과 CSS를 어느정도 배운 사람이 JavaScript에 대해 입문하려는 경우 도움이 될 내용을 작성했습니다.JavaScript란?간단하게 JavaScript는 HTML과 CSS에 행동을 부여해주는 역할을 합니다.HTML을 통해 뼈대를 만들고, CSS를 통해 뼈대를 꾸민 뒤, JavaScript에서 움직일 수 있게 처리해주는 것 입니다.자, 그러면 본격적으로 JavaScript를 사용하기 전에 먼저 개발환경을 설치해주겠습니다.해당 포스팅에서는 VsCode를 기준으로 진행하였습니다.개발환경 설치먼저 해당 링크에서 본인의 운영체제에 맞게 VsCode를 설치해준 뒤, 본인이 작업할 폴더를 바탕화면에 생성합니다.이후 File &gt; Open Folder를 통해 작업을 진행할 폴더를 열겠습니다.그리고 해당 폴더에서 ‘이름’.html 파일을 생성한 뒤 작업을 진행하면 됩니다.이때 작업 중 현재 상황을 실시간으로 보고 싶다면 아래와 같은 확장 프로그램을 사용하면 됩니다.이름은, Live Server이며 왼편에 있는 확장 프로그램 아이콘이나 Window 기준 (Ctrl + Shift + x) 단축키를 통해 검색 후 설치 할 수 있습니다.이후 실시간으로 보고 싶은 html 파일을 우클릭 후 Open with Live Server을 클릭하거나 오른편 아래 Go Live를 클릭하여 프로젝트 진행을 확인 할 수 있습니다. ( 저장 시 반영됩니다. )JS(JavaScript)를 작성하는 기본적인 방법먼저 기존에 존재하는 HTML을 가져와 수정해보겠습니다.단, JS를 작성하기 전 내가 작성해야 되는 내용을 상세하게 작성 후 진행하는 것이 좋습니다.아래는 예시입니다.작성해야 되는 내용: html 문서에서 id값이 text인 요소를 가져와 안의 내용(html)을 “Hello World!”로 변환한다.이를 따라 작성한 코드&lt;p id=\"text\"&gt;안녕하세요&lt;/p&gt;&lt;script&gt; document.getElementById(\"text\").innerHTML = \"Hello World!\";&lt;/script&gt;눈치 빠르신 분들은 눈치 채셨겠지만, Script안의 내용은 단순히 위의 작성해야 되는 내용을 영어로 JS 문법에 맞추어 작성한 것입니다.‘document’ 는 html 문서라는 뜻이고, ‘.’은 ~에서 또는 ~은/는 의미합니다.‘getElementById(‘id값’)’는 직역하자면 가져오다 + 요소를 + ~를 통해서 + Id이고, 자연스럽게 해석하면 요소를 ID를 통해 가져온다 입니다.따라서, id가 괄호안의 내용인 요소를 가져오게 됩니다.그리고 ‘innerHTML’은 내부 HTML을 뜻하고, ‘=’ 는 오른쪽에 있는 내용을 왼쪽에 대입하라는 뜻입니다.결국 정리하면 html문서에서 id 값이 text인 요소를 가져와 안의 html을 “Hello World”로 변경하라는 의미입니다.이 내용은 저희가 위에서 작성해둔 ‘작성해야 되는 내용’과 동일하죠.아래는 비슷한 형식의 같은 문법들인데, 한번 보시고 해석해 보세요.// id가 id 값인 요소의 src를 image1.jpg로 지정document.getElementById(\"id값\").src = \"image1.jpg\";// id가 id 값인 요소의 sytle의 color 속성을 blue로 지정document.getElementById(\"id값\").style.color = \"blue\";// id가 id 값인 요소의 sytle의 font-size(- 대신 뒷 글자를 대문자로 작성) 속성을 16px로 지정document.getElementById(\"id값\").style.fontSize = \"16px\";이런 식으로 특정 요소를 가져와 변환하는 방법에는 글자색, 글자크기, 가로크기 등 수백가지가 존재합니다.그렇다고해서 이러한 수백가지 방법을 모두 외울 필요는 없습니다.앞서 진행했던 것처럼 기본적으로 코드를 읽고 작성하는 방법을 배웠으니, 필요한 나머지 부분은 그때 그때 검색해서 찾아보면 됩니다.정리결국 코딩이란 문제 해결을 위한 도구 입니다.이를 올바르게 사용하기 위해서는 정확하게 문제를 파악하고 해결 방법을 생각하면 됩니다.앞서 포스팅에서 진행한 내용은, 문제 상황이 특정 html 요소의 내용을 수정하는 것이었고,이를 해결하기 위해 해결 방법으로 ‘문서에서 특정 요소를 가져와 요소의 내부 html을 다음과 같이 변경해라’라고 컴퓨터에게 명령을 내린것 뿐입니다.즉 한문장으로 정리하자면 JS는 컴퓨터에게 3살 아이도 이해하도록 해결방법을 작성해주는 것 입니다.JS 기본 예제간단한 예제를 통해 JS 기본 문법을 익혀보겠습니다.팝업창 생성 &amp; 삭제특정 버튼을 누르면 나타나고 X를 누르면 사라지는 팝업창을 생성해보겠습니다.이를 위해서 다음과 같은 단계가 필요합니다. HTML/CSS를 이용해 팝업창과 표시 버튼을 만든다. CSS를 이용해 팝업창을 숨긴다. (display: none) 표시 버튼을 누르면 숨겨진 팝업창이 표시된다. 팝업창의 X버튼을 누르면 팝업창을 숨긴다.*해당 포스팅에서는 JS관련된 부분인 3번과 4번만 설명하겠습니다.&lt;!-- 3. 표시 버튼을 누르면 숨겨진 팝업창이 표시된다. --&gt;&lt;!-- 버튼이 눌렸을 때 자바스크립트는 다음과 같이 실행 할 수 있습니다. --&gt;&lt;button onclick=\"실행될 자바스크립트 내용\"&gt;버튼&lt;/button&gt;이제, ‘표시 버튼을 누르면’까지 진행하였고 ‘숨겨진 팝업창이 표시된다’를 진행하면 됩니다.그러면 컴퓨터한테 아래와 같이 명령을 내리면 숨겨진 팝업창을 표시 할 수 있지 않을까요?html 문서에서 숨겨진 팝업창을 가져와 숨겨진 팝업창의 style의 display 속성을 ‘block’으로 설정한다.&lt;div id=\"pop-up\"&gt;팝업창 내용 . .&lt;/div&gt;&lt;button onclick=\"document.getElementById('pop-up').style.display = 'block';\"&gt; 팝업창 표시 버튼&lt;/button&gt;그렇다면 이제 4번도 구현할 수 있지 않을까요?3번과 마찬가지로 4번도 아래와 같이 명령을 내리면 됩니다.html 문서에서 표시된 팝업창을 가져와 표시된 팝업창의 style의 display 속성을 ‘none’으로 설정한다.&lt;div id=\"pop-up\"&gt; 팝업창 내용 . . &lt;button onclick=\"document.getElementById('pop-up').style.display = 'none';\"&gt; X &lt;/button&gt;&lt;/div&gt;&lt;button onclick=\"document.getElementById('pop-up').style.display = 'block';\"&gt; 팝업창 표시 버튼&lt;/button&gt;함수(function)를 이용해 코드 재사용을 해보자위에서 작성한 코드를 살펴보면 button의 onclick에서 실행되는 JS가 매우 유사한 것을 확인 할 수 있습니다.그렇다면, 우리는 해당 코드를 귀찮게 두번 적지 말고 한번만 작성하여 사용할 수 있지 않을까요?이러한 코드 재사용을 위해 아래와 같이 function을 이용할 수 있습니다.&lt;button onclick=\"functionName()\"&gt;&lt;/button&gt;&lt;script&gt; function functionName(){ 재사용 하고 싶은 자바 스크립트 코드 ~~ }&lt;/script&gt;단, 이때 함수, 변수 이름과 같은 변수 선언을 할 때 camelCase를 사용합니다.camelCase란 function name과 같이 띄어쓰기된 경우 functionName와 같이 붙인 뒤, 붙인 문자의 첫 글자를 대문자로 작성하는 것 입니다.이와 마찬가지로 font-size나, background-color와 같은 속성도 js에서 fontSize, backgroundColro와 같이 사용합니다.다시 돌아와서 코드 재사용을 위해 function에 넣을 자바 스크립트에서 1가지 차이점을 발견 할 수 있습니다.바로, 설정하는 값이 ‘none’ 그리고 ‘block’으로 차이가 있다는 점이죠.이러한 경우 functionName()에 있는 ()를 이용해서 function으로 전달해 줄 수 있습니다.아래는 button을 클릭한 경우, id가 text인 요소의 innerHTML이 전달받은 값으로 변경되는 코드입니다.&lt;p id=\"text\"&gt;변하지 않은 값&lt;/p&gt;&lt;button onclick=\"changeText('전달내용')\"&gt;텍스트 변경하기&lt;/button&gt;&lt;script&gt; function changeText(value) { document.getElementById(\"text\").innerHTML = value; }&lt;/script&gt;즉 function이란 것은 함수 입니다.학창시절에 수학시간에 배웠던 함수와 같이 특정한 값을 내보내는 함수입니다.f(x) = x + 1;f(3) = 4; -&gt; f(3) = 3 + 1 = 4마찬가지로 자바스크립트에서도 사용됩니다.function name(value) { 출력하기(value)}name(\"안녕하세요\") -&gt; \"안녕하세요\" 출력.그럼 다시 돌아와서, 기존에 작성한 팝업창을 function을 이용해 다시 작성 해보겠습니다.아래 코드를 보기전에 먼저 스스로 작성해보는 것을 추천드립니다.&lt;div id=\"pop-up\"&gt; 팝업창 내용 . . &lt;button onclick=\"setDisplay('none')\"&gt;X&lt;/button&gt;&lt;/div&gt;&lt;button onclick=\"setDisplay('block')\"&gt;팝업창 표시 버튼&lt;/button&gt;&lt;script&gt; function setDisplay(value) { document.getElementById(\"pop-up\").style.display = value; }&lt;/script&gt;물론 지금은 1줄의 코드를 2번 재사용 하는것이지만, 나중에 만약 수백줄의 코드를 여러번 불러다 써야 되는 경우 function을 활용하게 된다면 코드가 굉장히 줄어들겠죠.쿼리 셀렉터(queryselector)와 이벤트 리스너(eventListener)쿼리 셀렉터와 이벤트 리스너는 위에서 작성한 내용을 좀 더 효율적으로 작성 할 수 있게 해주는 속성입니다.쿼리 셀렉터(queryselector)먼저 쿼리(query)는 쉽게 말해서 특정 조건에 해당하는 자료를 조회하는 용도입니다.그렇다면 쿼리 셀렉터는 특정 조건에 맞는 css 셀렉터를 찾는 방법이라고 해석이 됩니다.기존에 getElementById(‘‘)를 통해서 (‘‘)안의 id에 해당하는 값을 가져왔다면, queryselector(‘‘)를 통해서 selector 문법을 이용해 요소를 가져올 수 있습니다.예를 들어서, queryselector(‘.text p’)와 같은 경우 class=’text’의 자손인 &lt;p&gt; 요소 중 첫번째 요소를 가져오게 됩니다.즉, ()안의 조건에 해당하는 자료를 조회하는 문법인거죠.그렇다면 이전에 작성한 내용을 다음과 같이 바꿀 수 있겠습니다.&lt;div id=\"pop-up\"&gt; 팝업창 내용 . . &lt;button onclick=\"setDisplay('none')\"&gt;X&lt;/button&gt;&lt;/div&gt;&lt;button onclick=\"setDisplay('block')\"&gt;팝업창 표시 버튼&lt;/button&gt;&lt;script&gt; function setDisplay(value) { document.querySelector(\"#pop-up\").style.display = value; }&lt;/script&gt;이벤트 리스너(eventListener)eventListener의 경우 특정 이벤트의 입력을 기다리고 있는 메소드 입니다.특정 이벤트는 클릭, 마우스 오버, 키 입력, 스크롤 등 다양하게 존재합니다.마찬가지로 필요한 이벤트가 있으면 검색해서 사용하면 됩니다.eventListener은 다음과 같이 아래처럼 특정 요소에 추가하여 사용하게 됩니다.요소.addEventListener(\"특정 이벤트\", function () {});위의 코드는 요소에 특정 이벤트가 실행되었을 때 뒤의 function을 실행하라는 코드입니다.간단하게 해석해봐도 요소에 특정 이벤트 입력을 기다리는 메소드를 추가한 뒤, 특정 이벤트가 입력되었을 때 뒤의 function을 실행하라고 해석이 될 것 같습니다.그렇다면 이제 우리는 onclick대신 button 요소를 가져와서 이벤트 리스너를 추가해주면 특정 스크립트를 실행하는 코드를 작성 할 수 있습니다.&lt;div id=\"pop-up\"&gt; 팝업창 내용 . . &lt;button class=\"exit-btn\"&gt;X&lt;/button&gt;&lt;/div&gt;&lt;button class=\"display-btn\"&gt;팝업창 표시 버튼&lt;/button&gt;&lt;script&gt; document.querySelector(\".exit-btn\").addEventListener(\"click\", function () { setDisplay(\"none\"); }); document.querySelector(\".display-btn\").addEventListener(\"click\", function () { setDisplay(\"block\"); }); function setDisplay(value) { document.querySelector(\"#pop-up\").style.display = value; }&lt;/script&gt;이런식으로 코드를 작성하게되면 script 부분이 조금 더 길어지긴 하지만 html과 js의 분리를 통해 유지보수가 쉬워진다는 장점이 있습니다.class이번에는 html의 class를 이용해서 css 속성을 적용하는 방법에 대해서 알아보겠습니다.위의 포스팅에서는 직접적으로 display 속성을 변화시켜 모달창을 출력 및 삭제 처리를 진행하였습니다.이와 마찬가지로 display 속성값이 있는 class를 부여하여 동일한 효과를 낼 수 있습니다.이러한 방법을 진행하려면 먼저 css에서 display 속성이 있는 클래스를 생성 후 js를 통해 해당 클래스를 탈부착 처리해야 합니다.js에서 class를 탈부착하는 방법은 다음과 같습니다.html요소.classList.add(\"클래스 이름\");// html요소에 class에 '클래스 이름'을 추가해라.html요소.classList.remove(\"클래스 이름\");// html요소에 class에 '클래스 이름'을 삭제해라.아래는 기본적으로 보이지 않는 pop-up 요소에 show라는 class를 부여하여 보이게 만들고, X 버튼을 클릭 시 show 클래스를 제거하여 다시 보이지 않게 만드는 코드입니다.&lt;div class=\"pop-up\"&gt; 팝업창 내용 . . &lt;button class=\"exit-btn\"&gt;X&lt;/button&gt;&lt;/div&gt;&lt;button class=\"display-btn\"&gt;팝업창 표시 버튼&lt;/button&gt;&lt;style&gt; .pop-up { display: none; } .show { display: block; }&lt;/style&gt;&lt;script&gt; document.querySelector(\".exit-btn\").addEventListener(\"click\", function () { document.querySelector(\".pop-up\").classList.remove(\"show\"); }); document.querySelector(\".display-btn\").addEventListener(\"click\", function () { document.querySelector(\".pop-up\").classList.add(\"show\"); });&lt;/script&gt;조금 더 간단하게 작성하자면, 요소.classList.toggle(‘클래스 이름’)를 이용해 ‘클래스 이름’ 클래스가 부여된 상태면 제거하고 클래스가 부여되지 않은 상태면 부여하게 작성 할 수도 있습니다. 이렇게 작성한 내용은 css 우선순위에 따라 덮어씌워지는 코드이므로 우선순위가 낮은 클래스가 적용된 상황에서는 적용되지 않습니다.class를 이용해 애니메이션 부여하기다시 돌아와서, 이를 응용하면 코드에 애니메이션을 손쉽게 부여 할 수 있습니다..pop-up에 시작 스타일과 .show에 최종 스타일을 부여한 뒤 변하게 되는 시작 타이밍을 부여하면 됩니다.좀 더 자세한 내용은 해당 CSS 포스팅을 참고해주세요.위의 코드에서 간단한 에니메이션을 적용한 css 코드입니다..pop-up { /* display: none; */ opacity: 0; transition: all 1s;}.show { /* display: block; */ opacity: 1;}opacity는 투명도 속성이며 1은 불투명 상태를, 0은 투명 상태를 의미합니다.이를 transition 속성을 이용하여 1초에 걸쳐 변화시켜줍니다." }, { "title": "HTML/CSS 고급 모듈", "url": "/posts/HTML-CSS-04/", "categories": "Web, HTML/CSS", "tags": "Sass, BootStrap, FrontEnd", "date": "2023-04-28 12:34:00 +0900", "snippet": "이전 HTML/CSS에서는 HTML과 CSS에 대한 기본적인 이해와 응용에 관한 내용이었다면, 이제는 어떻게 하면 좀 더 쉽게 레이아웃을 작성 할 수 있는지에 대해서 적어볼까 합니다.BootstrapFrontEnd에서는 Bootstrap이라는 툴킷을 이용하여 좀 더 쉽고 빠르게 프로젝트를 완성 시킬 수 있습니다.먼저, Bootstrap을 시작하려면 bootstrap css와 js를 html에 적용해야 합니다.저희는 앞서 배운 cdn을 이용해 적용시켜보도록 하겠습니다.&lt;head&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 가장 아랫 부분에 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;&lt;/body&gt; Bootstrap 시작하기에서는 integrity와 crossorigin 속성이 존재하는데, 이는 cdn의 보안 취약점을 막아주는 속성입니다.이런식으로 Bootstrap을 적용하였다면, 이제 우리는 간편하게 원하는 컴포넌트를 복사하여 사용 할 수 있습니다.Bootstrap 사용하기Bootstrap 버튼의 예시와 같이 다양한 스타일의 버튼들을 한줄의 코드로 가져다 쓸 수 있으며, 상황에 맞게 커스텀하여 사용이 가능합니다.또한, Bootstrap 유틸리티의 예시와 같이 간단하게 html상에서 마진과 패딩을 부여할 수도 있습니다.Bootstrap 반응형 레이아웃 작성하기Bootstrap 중단점은 Bootstrap의 강력한 반응형 기능 중 하나입니다.앞서 설명했던 반응형 레이아웃을 만들때 중단점을 기준으로 웹, 테블릿, 모바일 환경에서 레이아웃이 다르게 나타나게 설정한것과 같이 Bootstrap에서도 중단점을 이용해 손쉽게 다른 레이아웃이 나타나도록 설정 할 수 있습니다.중단점은 다음과 같습니다.$grid-breakpoints: ( xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px);Bootstrap 그리드 레이아웃Bootstrap에서는 웹 레이아웃을 구성하는 가장 대표적인 시스템인 12 Column Gird를 사용합니다.따라서 우리는 전체 박스를 나눌 때, 12등분을 하여 사용하게 됩니다.아래는 간단한 예시입니다.&lt;!-- 6개씩 2등분 --&gt;&lt;div class=\"row\"&gt; &lt;div class=\"col-6\"&gt;col-6&lt;/div&gt; &lt;div class=\"col-6\"&gt;col-6&lt;/div&gt;&lt;/div&gt;&lt;!-- 4개씩 3등분 --&gt;&lt;div class=\"row\"&gt; &lt;div class=\"col-4\"&gt;col-4&lt;/div&gt; &lt;div class=\"col-4\"&gt;col-4&lt;/div&gt; &lt;div class=\"col-4\"&gt;col-4&lt;/div&gt;&lt;/div&gt;&lt;!-- 6, 3, 3으로 3등분 --&gt;&lt;div class=\"row\"&gt; &lt;div class=\"col-6\"&gt;col-6&lt;/div&gt; &lt;div class=\"col-3\"&gt;col-3&lt;/div&gt; &lt;div class=\"col-3\"&gt;col-3&lt;/div&gt;&lt;/div&gt;이러한 속성을 중단점과 함께 응용해서 반응형 레이아웃을 구성 할 수 있습니다.&lt;div class=\"row\"&gt; &lt;div class=\"col-lg-6\"&gt;col-lg-6&lt;/div&gt; &lt;div class=\"col-lg-6\"&gt;col-lg-6&lt;/div&gt;&lt;/div&gt;위와 같은 레이아웃은 lg 즉, 992px이상에서만 col-6을 적용하라는 의미입니다.이렇게 col-6 사이에 반응형 중단점을 넣게 되면 조건문의 역할을 수행합니다.따라서, 위의 코드에서는 만약 화면크기가 992px이상이면, 하나의 열에 2등분된 col-lg-6이 존재하고, 그러지 않은 모바일 환경에서는 두개의 열에 각각 하나의 col-lg-6이 존재하게 됩니다.좋은 코드란?KISSKeep It Simple. Stupid!최대한 알아보기 쉽고, 수정이 간편하며 관리가 쉬운 코드로 작성하는 것이 좋습니다.그 후, 확장성을 생각하시면 좋습니다.확장성이란, 내가 작성한 코드를 바탕으로 여러가지 방면에서 활용하기 쉽도록 작성하는 것 입니다.SASS이번에는 CSS를 좀 더 효율적으로 작성할 수 있는 전처리 언어인 SASS에 대해서 알아볼 것 입니다.간단하게 설명하자면, CSS를 조금 더 프로그래밍 언어처럼 사용 할 수 있습니다.개발환경 세팅VsCode기준으로 설명을 하겠습니다. 우리가 사용하는 html에서는 오직 Css만 읽어올 수 있기에 당연히 Sass를 읽지 못합니다.따라서, Sass를 Css로 변환해 주는 확장프로그램을 사용해 작성한 Sass를 Css로 변환해 사용 가능하게 바꾸도록 하겠습니다.왼편에 확장프로그램을 선택하면 Live Sass Compiler라는 확장 프로그램을 검색 할 수 있습니다.이때, 3.0.0 버젼은 이전 버젼이므로 아래에 존재하는 5.0.0 이상 버젼인 새로운 Live Sass Compiler를 설치하시면 됩니다.이후 .scss파일을 만든 뒤, 오른쪽 아래에 있는 Watch Sass를 이용하면 손쉽게 .Css파일로 변환되는 것을 확인 할 수 있습니다.Sass 문법 - 변수우선 Sass의 대표적인 특징으로 변수를 사용 할 수 있습니다.프로젝트를 진행하다보면, Main Theme Color나, Sub Theme Color, Font-Size, Padding 등 프로젝트의 디자인 형식이 존재합니다.이러한 디자인 형식은 매번 반복해서 특정 숫자로 표시해야하거나 수정이 필요하면 전체적으로 일일이 수정해주어야 하는데, Sass에서는 변수에 저장하여 편하게 가져다 쓸 수 있습니다.또한, 해당 변수에 사칙연산과 같은 연산도 가능합니다.아래는 간단한 sass 변수들을 이용해 css 설정을 한 코드입니다.$main-color: #9747ff;$sub-color: #faab07;$default-font-size: 16px;$large-padding: 20px;p { color: $main-color; font-size: $default-font-size + 8px;}.container { background: $sub-color; padding: $large-padding; font-size: $default-font-size / 2;}물론 Css에서도 calc나, –, var()와 같은 코드들을 이용해 위와 같이 구현이 가능하지만, sass에서는 좀 더 간결하게 사용 가능합니다.Sass 문법 - Nesting일반적으로 프로그래밍을 진행할 때 아래와 같이 중첩(Nesting)을 이용하여 특정 함수 안에 있는 형태를 표시해줍니다.for (let i = 0; i &lt; 5; i++) { console.log(i); if (i &gt; 3) { console.log(i + \"는 3보다 큽니다.\"); }}이를 Css에서는 &gt;, 공백과 같은 결합자를 이용해 표시하게 됩니다.이러한 경우에 sass에서는 아래와 같이 Nesting 문법을 이용하여 좀 더 간결하게 표시 할 수 있습니다..header { width: 1200px; p { color: #fff; } .container { width: 100%; }}// css에서는 아래와 같다..header { width: 1200px;}.header p { color: #fff;}.header .container { width: 100%;}다만, Nesting을 사용할 때 2개를 초과하여 중첩되게 되면, 복잡할 수 있으므로 최대한 적게 중첩하여 사용하거나, 아래와 같은 방식이 더 나을 수도 있다.또한, 가상 선택자와 같은 경우 아래와 같이 사용 할 수 있다.button { :hover { color: blue; }}//button :hover을 의미button { &amp;:hover { color: blue; }}//button:hover을 의미//&amp;를 통해 띄어쓰기를 없애줌.Sass 문법 - @extend버튼을 여러개 만들어 사용하는 경우, 버튼의 크기나 글자 크기등은 같지만 특정 상황에서는 색상이 다른 경우가 있습니다.기존 Css에서는 btn클래스와 btn-red와 같은 클래스를 2개 부여하여 여러가지 다양성을 주었지만, Sass에서는 하나의 클래스로 이를 사용 할 수 있습니다.바로 @extend를 이용하는 건데, 이는 해당 클래스의 내용을 이어받는다는 뜻입니다..btn { width: 100px; height: 20px; font-size: 16px; padding: 10px; background: white; color: black;}.btn-red { @extend .btn; background: red; color: white;}.btn-green { @extend .btn; background: green; color: white;}이러한 경우 btn-red는 btn btn-red 대신, btn-red 클래스 하나만 적용해도 같은 결과를 나타내게 됩니다.만약, btn 클래스를 사용할 일이 없다면, 아래와 같이 임시 클래스 기호인 %를 이용해 css의 용량을 줄일수도 있습니다.%인 임시클래스의 경우 css로 컴파일을 진행할 때 클래스로 컴파일을 하지 않아 css에서 나타나지 않습니다.%btn { // 위와 동일}.btn-red { // 위와 동일}.btn-green { // 위와 동일}Sass 문법 - @mixin@mixin은 함수와 같은 개념입니다.좀 전에 보았던 @extends와 같이 중복된 Css를 재사용이 가능하지만, 특정 변수들을 가지고 가변적으로 제작 할 수 있습니다.아래 코드를 보면서 설명드리겠습니다.@mixin btn-function() { width: 100px; height: 20px; font-size: 16px; padding: 10px; background: white; color: black;}.btn-red { @include btn-function(); background: red; color: white;}.btn-green { @include btn-function(); background: green; color: white;}해당 코드는 위의 @extend와 같이, btn-function을 가져와 해당 btn-red와 btn-green에 적용한 sass 입니다.다만 @mixin과 같은 경우에는 아래와 같이 @extend보다 한가지 더 기능을 제공합니다.@mixin btn-function($background-color, $font-color) { width: 100px; height: 20px; font-size: 16px; padding: 10px; background: $background-color; color: $font-color;}.btn-red { @include btn-function(red, white);}.btn-green { @include btn-function(green, white);}“$변수명”와 같이 작성하여 @include에서 특정 값들을 가져와 그 값을 기반으로 Css를 작성할 수 있습니다.일반적으로 “값”들을 가져오지만 “속성” 또한 아래와 같이 가져올 수 있습니다.@mixin test($attr) { #{ $attr }: 10px;}.container { @include test(width);}//container의 width:10px; Css가 적용되게 됨.Sass 문법 - @useimport를 통해서 다른 파일을 가져와 해당 파일에서 사용하는 것과 같이 Sass에서는 @use를 이용해 특정 파일을 가져와 사용 할 수 있습니다.이때, 특정 파일의 변수나, 함수같은 경우 “파일이름.변수”와 같이 사용해야하고, 기본 css 선택자를 이용한 css는 자동으로 적용 됩니다.@use \"파일명.scss\";파일명.$변수명; /* 다른 파일의 변수쓰는법 */@include 파일명.mixin이름(); /* 다른 파일의 mixin쓰는법 */아래는 test.scss에서 파일을 불러온 예제입니다.//test.scss$main-color: #333;@mixin font($font-size) { font-size: $font-size;}p { color: #fff;}//main.scss@use \"test.scss\";button { @import test.font(10px); background: test.$main-color;}아래는 위의 Scss가 컴파일 과정을 거쳐서 css에서 적용된 내용입니다.확인하기 전에 먼저 한번 어떤식으로 적용이 될지 생각하고 확인해보시기 바랍니다./* 실제 css에서 적용된 내용 */p { color: #fff;}button { font-size: 10px; background: #333;}이렇게 @use를 이용해 가져오는 파일의 경우 개별적으로는 사용하지 않는 경우도 존재합니다.이럴때 파일 이름 앞에 _를 이용해 작명을 하게 될 경우 컴파일하지 않아 불필요한 css파일이 생성되는 일을 막을 수 있습니다.예를들어, main-css.scss라는 파일을 오직 @use로만 사용한다면, _main-css.scss라고 작명할 시 자동으로 컴파일 되지 않습니다.Grid LayoutGrid 레이아웃은 격자를 만드는 레이아웃입니다.즉, 모눈종이를 만든다고 생각하시면 편합니다.4개의 div를 row 2행, column 2열으로 구성해보았습니다.&lt;div class=\"grid-container\"&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/div&gt;.grid-container { display: grid; grid-template-columns: 100px 100px; grid-template-rows: 100px 100px 100px; grid-gap: 10px;}.grid-container div { border: 1px solid black;}이후 구성된 2x2 레이아웃에서 특정 박스를 늘릴 수 있습니다.방법은 2가지가 존재하는데 첫째는 자식 요소에 속성을 주는 방법이 있고, 둘째로 부모 요소에서 정의하는 방법이 있습니다.첫번째 방법은 자식 요소에 class를 부여하고 grid-column, grid-row속성을 적용하면 됩니다..grid-div1 { /* 1번째 세로선부터 3번째 세로선까지 */ grid-column: 1 / 3;}.grid-div2 { /* 2번째 가로선부터 4번째 가로선까지 */ grid-row: 2 / 4;}두번째 방법은 자식요소에 area 속성을 부여한뒤, 부모 요소에서 template-areas에서 자식 요소들을 배치 할 수 있다..grid-container { grid-template-areas: \"div1 div1\" \"div2 .\" \"div2 .\";}.grid-div1 { grid-area: div1;}.grid-div2 { grid-area: div2;}Position: stickyPosition sticky는 가변적인 position flex입니다.좀 더 쉽게 설명하자면, 해당 요소가 화면에 나오면 fixed와 마찬가지로 화면에 고정시키고, 해당 요소의 부모요소가 화면에서 벗어나게 되면, 다시 원래의 position으로 넣어주게 됩니다.이를 이용해서 특정 요소가 화면에 나왔을 때만 고정시키고 나머지 요소는 스크롤이 가능하게 처리 할 수 있습니다." }, { "title": "기본 CSS속성 2", "url": "/posts/HTML-CSS-03/", "categories": "Web, HTML/CSS", "tags": "HTML, CSS, HowTo, FrontEnd", "date": "2023-04-13 09:00:00 +0900", "snippet": "Flex 속성기본적으로 div 박스는 아래로 정렬되는 속성을 가지고 있습니다. 즉, 위에서 부터 아래로 한칸씩 쌓이는 것이죠.그렇지만, flexbox를 이용하면 이를 손쉽게 변경 할 수 있습니다.&lt;div class=\"flex-container\"&gt; &lt;div class=\"box\"&gt;&lt;/div&gt; &lt;div class=\"box\"&gt;&lt;/div&gt; &lt;div class=\"box\"&gt;&lt;/div&gt;&lt;/div&gt;.flex-container { display: flex;}.box { width: 100px; height: 100px; background: #ddd; margin: 5px;}이런식으로 box들을 감싸고 있는 div 요소에 flex-container 클래스를 부여함으로서 box들이 가로로 정렬되게끔 구현 할 수 있습니다.이외에도 flexbox는 다양한 속성들을 가지고 있습니다..flex-container { display: flex; justify-content: center; /* 가로 축을 기준으로 정렬 -&gt; 가로 기준으로 오른편 가운데 왼편 ... */ align-items: center; /* 세로 축을 기준으로 정렬 -&gt; 세로 기준으로 위 가운데 아래 .... */ align-content: center; /* 박스가 가로줄로 여러개 일때, 일괄적으로 세로 정렬 */ flex-direction: column; /* 배치 방향 설정 */ flex-wrap: wrap; /* 폭이 넘치는 요소 wrap(줄 넘김) 처리 */}.box { flex-grow: 2; /* 폭이 상대적으로 몇배인지 결정 기본 값 0*/}코딩 생활에 도움을 주는 확장 프로그램VSCode상에서 확장 프로그램은 윈도우 기준 ctrl + shift + X 입니다. 또는 왼쪽 탭에서 네모난 박스들이 있는 확장프로그램 버튼을 클릭해서 열 수 있습니다.Prettier, Beautify코딩 생활에 도움을 주는 첫번째 프로그램으로 Code Formatter가 있습니다.Code Formatter이란 개발자가 작성한 코드를 일정한 규칙에 맞추어 변환해 주는 도구를 뜻합니다.유명한 Code Formatter으로 Prettier와 Beautify가 존재합니다.두 확장 프로그램 모두 작성한 코드를 보기 좋게 변환해주지만 약간의 차이는 존재합니다.Prettier은 조금 엄격한 스타일을 강제하고, Beautify는 조금 더 자유로운 스타일을 지정 할 수 있습니다. VSCode Code에서는 Editor: Format on Save 속성을 지정해줘 저장 시 code formating이 수행되도록 설정 할 수 있습니다.Emmet추천하는 두번째 확장 프로그램은 Emmet입니다.해당 프로그램은 css 셀렉터를 이용하여 HTML을 손쉽게 생성 할 수 있는 확장 프로그램입니다.다만 해당 프로그램은 약간의 문법 공부가 필요한데, 자주 사용하는 예시에 대해서 알아보겠습니다.&lt;!-- div.box (.box로도 가능 = div는 생략 가능) --&gt;&lt;div class=\"box\"&gt;&lt;/div&gt;&lt;!-- li&gt;ul.item*3 --&gt;&lt;li&gt; &lt;ul class=\"item\"&gt;&lt;/ul&gt; &lt;ul class=\"item\"&gt;&lt;/ul&gt; &lt;ul class=\"item\"&gt;&lt;/ul&gt;&lt;/li&gt;&lt;!-- div.container&gt;div --&gt;&lt;div class=\"container\"&gt; &lt;div&gt;&lt;/div&gt;&lt;/div&gt;.container { /* w100 */ width: 100px; /* m10 */ margin: 10px;}이런식으로 간단한 명령어들을 통해 좀 더 편리하게 html css 코딩이 가능합니다.이러한 문법 외에도 좀 더 많은 명령어들이 있기에, 자세한 정보는 구글 검색이나 공식문서를 통해 확인이 가능합니다.이외에눈의 피로를 덜어주는 다크 테마, 키워드로 코드를 작성 할 수 있는 스니펫(snippets), 오류를 찾아주는 ESLint 등 수많은 확장프로그램이 존재하므로 한번 찾아보는 것을 추천드립니다.반응형 레이아웃우리가 작성하는 html와 css는 사용자의 디스플레이 크기에 따라 다르게 표기됩니다.그렇기에 모바일 환경이나 웹 환경에서 최적화 된 레이아웃이 별도로 존재하게 되고 이러한 차이를 해결하기위해 반응형 레이아웃을 사용하게 됩니다.&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;반응형 웹을 만들 때 head 태그에 들어가야 되는 필수적인 내용입니다.해당 기능을 통해 기기의 가로 사이즈를 가져오고 아래와 같이 가로 크기에 따라서 레이아웃을 제작합니다.1200px / 992px / 768px / 576px해당 크기는 일반적으로 사용되는 브라우저 폭입니다. 이러한 브라우저 폭에 따라서 최적화된 각각의 레이아웃을 제작하면 됩니다.다만, 4가지 모두 구현하기보다는 태블릿 환경인 1200px와 768px 이하인 모바일 환경으로 나누어 개발하는 것을 권장드립니다.반응형 레이아웃 사용하기body { font-size: 60px;}@media screen and (max-width: 1200px) { body { font-size: 40px; }}@media screen and (max-width: 768px) { body { font-size: 30px; }}위와 같은 media query을 이용해 간단하게 반응형 css를 구성 할 수 있습니다.해당 코드에서는 기본적으로 font-size를 60px으로 구성하고 있지만, 웹 사이트를 출력하는 기기의 가로사이즈가 1200px보다 작은 경우에는 font-size를 40px으로, 768px보다 작은 경우에는 font-size를 30px으로 구성하게 됩니다.즉, 태블릿 환경에서는 40px의 font-size를 가지고 있고, 모바일 환경에서는 30px의 font-size를 지니고 있게 됩니다.HTML에 아이콘 넣기HTML에 아이콘을 넣는 방법 중 대표적인 방법인 구글 Material Icon과 Font Awesome 아이콘을 적용해 보겠습니다.먼저 이러한 아이콘들을 사용하기 위해서는 CSS 파일을 적용해야 합니다.다만, CSS 파일을 받아서 적용하는 것은 번거롭기 때문에 CDN을 이용하여 서버를 통해서 받아오겠습니다.&lt;!-- FontAwesome --&gt;&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"/&gt;&lt;!-- GoogleMaterial --&gt;&lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0\"/&gt;해당하는 &lt;link&gt;를 html head 부분에 삽입하여 css를 받아온 뒤, 마음에 드는 아이콘을 아래 링크에서 찾아서 사용 하면 됩니다.FontAwesome 바로가기GoogleMaterial 바로가기아래는 해당 아이콘을 적용한 예시 코드 입니다.&lt;!-- FontAwesome Icon --&gt;&lt;i class=\"fa-solid fa-magnifying-glass\"&gt;&lt;/i&gt;&lt;!-- GoogleMaterial Icon --&gt;&lt;span class=\"material-symbols-outlined\"&gt; search &lt;/span&gt;Transition 속성 사용하기Transition 속성은 CSS의 변화가 생겼을 때 즉각적으로 변하는 것이 아니라 지정된 시간에 따라 천천히 변하게 만들어주는 속성 입니다.이러한 속성을 이용해 간단한 애니메이션을 만들 수 있습니다.해당 포스팅에서 애니메이션에 대한 이야기를 전부 하기에는 현실적으로 어려움이 있기에 간단한 예제 하나를 설명하면서 어떻게 애니메이션을 만들지 보여드리겠습니다.먼저, 애니메이션의 작동 원리는 다음과 같습니다. 시작지점을 정한다. 종료지점을 정한다. css가 변하는 시점을 정한다(어떤 상황에서) transition으로 css를 천천히 변화한다.아래는 input요소에 마우스가 올라가면 색상과 가로 길이가 바뀌는 코드입니다.즉, 시작 지점은 width: 200px, background: red 이고, 종료 지점은 width: 400px, background: blue 입니다.이후 css가 변하는 지점은 마우스가 올라갔을 때, 모든 transition을 2초에 걸쳐 변화시킵니다.input { width: 200px; height: 50px; background-color: red; transition: all 1s;}input:hover { width: 400px; background-color: blue;}아래는 trainsition의 세부 속성들입니다.input { /* 시작 전 딜레이 */ transition-delay: 0s; /* transition 작동 속도 */ transition-duration: 2s; /* 어떤 속성에 transition 입힐건지 */ transition-property: width background-color; /* 동작 속도 그래프조정 */ transition-timing-function: ease-in; /* 모든 트랜지션 프로퍼티를 한번에 지정한다 (shorthand syntax) */ transition: all 2s;}복잡한 애니메이션 만들기애니메이션을 만들 때, 시작위치와 종료위치 사이에 무언가를 넣고 싶으면 기존 방법으로는 굉장히 복잡해집니다.단순히 한방향으로만 변하는 것이 아니라 양방향으로 이동할 수 있는 에니메이션에 대해서 말씀드리겠습니다.transition 속성먼저, 복잡한 애니메이션을 만들기 전 알아야 하는 속성이 있습니다.바로 transform 속성입니다. 해당 속성은 요소를 독립적으로 움직이는데 사용 합니다.아래는 자주 사용되는 transform 속성들입니다..box { /* 10도 회전 */ transform: rotate(10deg); /* x 10px, y 20px만큼 좌표이동 */ transform: translate(10px, 20px); /* 크기 2배 확대 */ transform: scale(2); /* 30도 비틀기 */ transform: skew(30deg); /*transform 두개 이상을 한꺼번에 쓰려면*/ /* 10도 회전 및 X축 30px 좌표 이동 */ transform: rotate(10deg) translateX(30px);}@keyframes@keyframes를 이용하여 애니메이션의 진행 상황에 따라 상태를 정의 할 수 있습니다.아래는 X축 방향으로 100px만큼 이동 후 다시 X축 방향으로 -100px만큼 이동하는 코드입니다..container:hover { animation-name: test-animation; animation-duration: 2s;}@keyframes test-animation { 0% { transform: translateX(0px); /* 애니메이션이 0%만큼 동작시 */ } 50% { transform: translateX(100px); /* 애니메이션이 50%만큼 동작시 */ } 100% { transform: translateX(-100px); /* 애니메이션이 100%만큼 동작시 */ }}이런식으로 애니메이션을 구현하면 애니메이션이 종료될 때, 원래 위치로 순간이동하게 됩니다.이런 경우 100%의 값을 transform: translateX(0px);과 같이 0%의 값과 동일하게 주면 됩니다.@keyframes test-animation { 0% { transform: translateX(0px); /* 애니메이션이 0%만큼 동작시 */ } 33% { transform: translateX(100px); /* 애니메이션이 33%만큼 동작시 */ } 66% { transform: translateX(-100px); /* 애니메이션이 66%만큼 동작시 */ } 100% { transform: translateX(0px); /* 애니메이션이 100%만큼 동작시 */ }}아래는 애니메이션의 세부 속성 들입니다..container:hover { animation-name: test-animation; animation-duration: 1s; animation-timing-function: linear; /*베지어 곡선*/ animation-delay: 1s; /*시작 전 딜레이*/ animation-iteration-count: 3; /*반복 횟수*/ animation-play-state: paused; /*애니메이션을 멈추고 싶은 경우 자바스크립트로 이거 조정*/ animation-fill-mode: forwards; /*애니메이션 끝난 후에 원상복구 하지말고 정지*/}복합 결합자(CSS Combinators)선택자들 사이의 관계를 정의하는 결합자라는 것이 있습니다. 결합자에는 4개가 존재합니다. 자손 선택자 -&gt; [띄어쓰기]를 통해 모든 자손을 선택 자식 선택자 -&gt; [&gt;]를 통해 선택된 자식을 선택 인접 형제 선택자 -&gt; [+]를 통해 바로 뒤 형제 선택 일반 형제 선택자 -&gt; [~]를 통해 모든 형제 선택아래에서 간단한 html 구조를 통해 보여드리겠습니다.&lt;div class=\"parent\"&gt; &lt;div class=\"first-child\"&gt;&lt;/div&gt; &lt;div class=\"second-child\"&gt;&lt;/div&gt; &lt;div class=\"third-child\"&gt;&lt;/div&gt; &lt;section&gt; &lt;div class=\"fourth-child\"&gt;&lt;/div&gt; &lt;/section&gt;&lt;/div&gt;.parent div { /* 자손 선택자 .parent의 모든 자손 div 적용 */ /* 따라서 fourth-child도 적용 */}.parent &gt; div { /* 자식 선택자 .parent의 자식 div 적용 */ /* 따라서 fourth-child는 적용 안됨 */}.first-child + div { /* first-child의 바로 뒤 형제인 second-child에게 적용됨 */}.first-child ~ div { /* first-child의 형제인 second-child, third-child 두개에게 적용 */}.parent:hover &gt; .second-child { /* parent에 hover되었을때, second-child에게 해당 css를 적용해라. */}Video, Audio 속성&lt;video muted autoplay&gt; &lt;source src=\"비디오 파일경로\" type=\"video/mp4\" /&gt; &lt;source src=\"1번 비디오가 안될 때, 대체 비디오 파일경로\" type=\"video/mp4\" /&gt;&lt;/video&gt;&lt;!-- muted는 음소거상태 --&gt;&lt;!-- autoplay는 자동재생 (muted와 함께 넣어야 동작함) --&gt;&lt;!-- poster는 썸네일이미지 --&gt;&lt;!-- preload는 영상을 먼저 다운을 받을지 말지를 선택가능합니다 (auto, metadata, none 사용가능) --&gt;&lt;audio&gt; &lt;source src=\"오디오 파일경로\" /&gt;&lt;/audio&gt;" }, { "title": "기본 CSS속성 1", "url": "/posts/HTML-CSS-02/", "categories": "Web, HTML/CSS", "tags": "HTML, CSS, HowTo, FrontEnd", "date": "2023-04-06 09:17:34 +0900", "snippet": "다양한 레이아웃 속성들웹 페이지 레이아웃을 만들 때 가장 먼저 해야 하는 것은 세분화 입니다.하나의 페이지를 여러 구역으로 나누고, 해당 구역을 다시 박스 형태로 나누다 보면 어떤 식으로 코드를 작성해야 되는지 감이 잡힐 것이라고 생각 됩니다.float 속성&lt;div class=\"container\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt;.container { height: 100px;}.left { background-color: blue; height: 100%; width: 50%;}.right { background-color: red; height: 100%; width: 50%;}위와 같은 상황에서는 어떻게 표현될까요?왼쪽과 오른쪽 블럭이 각각 50%의 가로와 100px만큼의 크기를 가지고 1열로 정렬 될 것 같지만, 실제로는 2열로 배열되게 됩니다.이러한 이유는 div의 특징으로 가로칸을 전부 차지하려는 특징이 있기 때문입니다.이를 해결하기 위해, float(뜨다) 특성을 이용해 div를 띄울 수 있습니다..left { float: left;}.right { float: right;}위와 같이 float 특성을 추가로 부여하게 된다면, left는 왼쪽으로 right는 오른쪽으로 공중에 뜬 상태가 됩니다.그러면 저희가 생각한대로, 1열에 50%씩 차자히는 레이아웃이 완성됩니다.유의해야 할 점으로 float 특성은 떠있는 상태이므로, 이후에 배치되는 요소들은 떠있는 요소 아래로 들어가게 됩니다.&lt;div&gt; &lt;div class=\"left-box\"&gt;&lt;/div&gt; &lt;div class=\"right-box\"&gt;&lt;/div&gt; &lt;div class=\"next-box\"&gt;&lt;/div&gt;&lt;/div&gt;.next-box { clear: both;}따라서 위와 같이 그 다음으로 오는 요소에 clear: both 속성을 부여해야 합니다.번외float 대신 다른 속성을 이용해 가로 정렬을 구현 할 수 있습니다.가로 정렬이 되지 않는 이유로 div 태그가 display:block 속성이 있기 때문인데, 이를 display: inline-block으로 설정하면 해결됩니다.다만, 이 경우에는 태그 사이에 공백 제거를 진행해야 하기에 잘 사용하지 않습니다.background 속성.main-background { background-color: #000; /* 배경 색 */ background-image: url(\"img location\"); /* 배경 이미지 */ background-size: cover; /* 배경 사이즈 */ background-repeat: no-repeat; /* 배경 이미지 반복 여부 */ background-position: center; /* 배경 이미지 상대 위치 */ background-attachment: fixed; /* 배경 이미지 고정 여부*/}위와 같은 방식으로 배경을 설정 할 수 있습니다.position 속성.container { position: static; /* 정적 위치 -&gt; 변경 불가 */ position: fixed; /* 고정 위치 -&gt; 브라우저 창 (viewport) 기준 */ position: relative; /* 상대 위치 -&gt; 자기 자신 기준 */ position: absolute; /* 절대 위치 -&gt; 부모 위치 기준 */}이후 position 위치를 기준으로 top, right, left, bottom의 속성을 이용하여 요소의 상하좌우 위치를 변경 할 수 있습니다.위치 값을 이용해 가운데 정렬.center { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 사용자 정의(필수);}위의 값들을 모두 부여해 가운데 정렬이 가능합니다.CSS 기본 설정전체 폴더내에서 중복으로 사용되는 CSS 는 미리 설정하면 균일한 CSS를 사용함은 물론 편리하게 CSS를 코딩 할 수 있습니다.아래는 기본설정 예시입니다.body { color: #333; font-size: 16px; font-weight: 400; font-family: \"Nanum Gothic\", sans-serif; line-height: 1.4;}img { display: block;}a { text-decoration: none;}이외에도 크롬, 사파리, 엣지 등 여러 브라우저에서 전부 다른 스타일이 적용되어 보이기 때문에 CSS normalize를 통해 통일된 스타일을 적용 시킬 수 있습니다.해당 링크의 CSS를 사용하거나 html 파일의 &lt;head&gt;부분에 아래 코드를 넣어 해결 할 수 있습니다.아래 코드는 ‘reset css cdn’을 검색하면 나옵니다.&lt;!-- Reset Css --&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reset-css@5.0.1/reset.min.css\"/&gt;```Form 태그&lt;form&gt; 태그를 이용해 만들 수 있는 form은 설문지 같은 여러 내용들을 사용자로부터 받아올 때 사용합니다.따라서, 이러한 form태그 안에는 필연적으로 input 태그들이 포함되어야 합니다.아래는 많이 쓰이는 input 태그들의 예시입니다.&lt;input type=\"text\" /&gt;&lt;input type=\"email\" /&gt;&lt;input type=\"password\" /&gt;&lt;input type=\"radio\" /&gt;&lt;input type=\"file\" /&gt;&lt;input type=\"checkbox\" /&gt;&lt;input type=\"submit\" /&gt; // 전송버튼은, &lt;button type=\"summit\"&gt;&lt;/button&gt;으로대체가능.&lt;select&gt; &lt;option&gt;옵션1&lt;/option&gt;&lt;/select&gt;&lt;textarea&gt;&lt;/textarea&gt;이런 input태그에는 아래와 같은 속성들이 들어갈 수 있습니다.&lt;input placeholder=\"회색으로 미리 표시될 내용\" value=\"현재 input 태그 안에 입력되어 있는 값\" name=\"변수명\"/&gt;label 태그radio button같은 input 태그를 설계할때는 텍스트인 label태그를 같이 사용하는 경우가 많습니다.이런 경우 사용자 편의를 위해 label 태그를 클릭하더라도 input태그가 체크되도록 설정 할 수 있습니다.&lt;input type=\"radio\" id=\"like\" /&gt; &lt;label for=\"like\"&gt;좋아요&lt;/label&gt;table 태그html에서는 &lt;table&gt;속성을 이용하여 표를 만들 수 있습니다. 아래는 기본적인 table 예제입니다.&lt;table&gt; &lt;thead&gt;&lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;내용&lt;/td&gt; &lt;td&gt;내용&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;tr은 행(row)를 의미하고 td는 열(column)을 의미합니다. td대신 th를 이용해 강조처리를 할 수 있습니다.thead와 tbody는 단순한 헤드 영역을 구분하기 위해 사용됩니다.table 태그를 본격적으로 사용하기 위해서는 html 구조 작성 이후 추가적인 속성들을 부여 해야 합니다.아래는 자주 사용되는 css 속성 예시 입니다.table,td,tr { border: 2px solid black; /* 테두리 속성 */ border-collapse: collapse; /* 테두리를 한줄로 표시 */ vertical-align: center; /* 텍스트의 수직 방향 설정 */ text-align: center; /* 텍스트의 수평 방향 설정 */}아래는 html에서 자주 사용되는 css 속성 입니다.&lt;td colspan=\"3\"&gt;&lt;/td&gt;//3개 만큼의 열을 병합한 열 작성 코드입니다.&lt;td style=\"width: 50%\"&gt;상품명&lt;/td&gt;// 이때 가로 길이는 전체 열에 영향을 미칩니다.pseudo-class(가상 선택자)가상 선택자를 이용해 우리는 어떤 가상의 상태에 CSS 속성을 부여해 줄 수 있습니다.가상 선택자의 예시는 아래와 같습니다..btn:hover { background-color: red; /*마우스를 올려놓을 때*/}.btn:focus { background-color: blue; /*클릭 후 계속 포커스 상태일 때*/}.btn:active { background-color: green; /*클릭을 유지하고 있을 때*/}.box:before { content: \"\"; /* box라는 클래스 앞에 가상으로 생성 */}.box:after { content: \"\"; /* box라는 클래스 뒤에 가상으로 생성 */}해당 링크에서 다양한 가상 선택자들을 확인 할 수 있습니다.CSS를 작성할 때 TIP아래는 간단한 버튼을 예시로 든 CSS 입니다..btn { display: block; width: 10vh; height: 5vh; border-radius: 20px; font-size: 28px; background-color: #ddd; cursor: pointer;}.btn-lg { display: block; width: 20vh; height: 5vh; border-radius: 20px; font-size: 28px; background-color: #ddd; cursor: pointer;}해당 클래스들은 가로 넓이를 제외한 모든 값이 똑같은 클래스 입니다.이런 경우에는 다음과 같이 중복된 속성을 하나의 속성으로 정의하고, 달라진 속성에 대해 추가적으로 정의를 하여 좀 더 간결한 CSS 작성이 가능합니다..btn { display: block; width: 10vh; height: 5vh; border-radius: 20px; font-size: 28px; background-color: #ddd; cursor: pointer;}.btn-lg { width: 20vh;}위와 같은 상황에서는 아래와 같이 html을 작성하게 됩니다.&lt;button class=\"btn\"&gt;&lt;/button&gt; //일반 버튼&lt;button class=\"btn btn-lg\"&gt;&lt;/button&gt; //큰 버튼마찬가지로 색상 같은 요소를 변경하려면 색상 요소의 값만 가지고 있는 css를 만들어 추가적으로 부여해 주면 색상이 다른 버튼을 사용 할 수 있습니다.CSS 작명법변수명을 지을때 camelClass 같은 규칙이 있는 것 처럼 CSS 작명에서도 사용 할 수 있는 규칙이 있습니다.바로 BEM(Block__Element–Modifer) 룰이라는 것인데, (해당 영역)__(해당 요소)–(세부 속성)와 같은 느낌으로 작성하면 됩니다.아래는 간단한 예시입니다.&lt;div class=\"form\"&gt; &lt;h1 class=\"form__title\"&gt;사진보내기&lt;/h1&gt; &lt;img class=\"form__img\" /&gt; &lt;button class=\"form__button--send\"&gt;전송&lt;/button&gt; &lt;button class=\"form__button--cancel\"&gt;취소&lt;/button&gt;&lt;/div&gt;해당 내용은 반드시 지켜야 된다기보다 이러한 방법도 있다고 생각하시면 될 것 같습니다." }, { "title": "기초 HTLM,CSS 문법.", "url": "/posts/HTML-CSS-01/", "categories": "Web, HTML/CSS", "tags": "HTML, CSS, HowTo, FrontEnd", "date": "2023-04-05 07:05:34 +0900", "snippet": "HTML이란?하이퍼 텍스트 마크업 언어(Hyper Text Markup Language, HTML)짧게 설명하자면, &lt;태그&gt; 형식을 이용하여 제목, 단락, 목록 등 구조적 문서를 만들 수 있는 방법을 제공하는 마크업 언어입니다.아래는 HTML의 기본적인 템플릿 입니다.&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt;HTML 기본태그 사용하기앞서 HTML은 &lt;태그&gt; 형식을 사용하여 여러 구조적인 요소를 사용한다고 하였습니다.HTML의 기본 태그 목록들 입니다.&lt;h1&gt;글 제목&lt;/h1&gt;&lt;p&gt;글 본문&lt;/p&gt;&lt;img src=\"이미지 경로\" /&gt;&lt;a href=\"링크 경로\"&gt;링크&lt;/a&gt;&lt;button&gt;버튼&lt;/button&gt;&lt;ol&gt; &lt;li&gt;순서가 있는 리스트&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt; &lt;li&gt;순서가 없는 리스트&lt;/li&gt;&lt;/ol&gt;태그들은 각자 역할이 있으며, 이러한 역할에 올바르게 작성해야합니다.기본 CSS 사용하기대부분의 태그는 style이라는 속성을 이용하여 꾸며줄 수 있습니다.예를 들어, 아래와 같은 코드를 이용해 글 본문 내용의 색상과 글자 크기, 글자 굵기를 바꾸어 줄 수 있습니다.&lt;p style=\"color: blue; font-size: 16px; font-weight: bold\"&gt;&lt;/p&gt;글자에서 자주 사용되는 속성들은 다음과 같습니다.p { color: #333; /* 글자 색상 */ font-size: 16px; /* 글자 크기 */ font-weight: 400; /* 글자 굵기 */ font-family: \"Nanum Gothic\", sans-serif; /* 글자 폰트 */ text-align: center; /* 글자 가운데 정렬 */}전체 속성들은 해당 사이트에서 확인 할 수 있습니다. 속성들은 암기할 필요는 없습니다. 어떤 속성이 있는지만 기억하고 필요할 때 검색하여 찾아 써도 괜찮습니다.특정 글자만 스타일 적용하기아래와 같이 특정 글자만 스타일을 적용 할 수 있습니다.&lt;p&gt;안녕하세요 저는 &lt;span style=\"color:red\"&gt;HTML&lt;/span&gt;을 배우고 있습니다.&lt;/p&gt;외부 CSS 파일 이용하기외부 CSS 파일을 이용해서 좀 더 효율적으로 웹 문서를 작성 할 수 있습니다.이를 위해서 아래와 같이 HTML 파일의 &lt;head&gt;부분에 &lt;link&gt; 태그를 이용하여 CSS파일 경로를 지정해야 됩니다.&lt;link href=\"css파일 경로\" rel=\"stylesheet\" /&gt;css 파일 경로는 “./css/main.css”와 같은 형식으로, “./” 는 현재 경로를 의미하고 “css/main.css”는 css 폴더 안에 있는 main.css 파일을 뜻합니다.즉, 위와 같은 경로를 해석하자면 현재 HTML 위치에 있는 css폴더 안의 main.css파일을 불러오겠다는 의미입니다.이제, 기본 CSS 사용하기에서 사용했던 스타일을 CSS 파일에서 작성해보겠습니다.p { color: blue; font-size: 16px; font-weight: bold;}위의 css 코드는 모든 p태그에 color, font-size, font-weight 속성을 적용하는 코드 입니다.이외에도 CSS Selector(선택자)을 이용하여 특정 태그만을 선택 할 수도 있습니다.클래스 선택자는 .class, ID 선택자는 #id, 태그 선택자는 tag으로 작성 할 수 있고, 선택자는 띄어쓰기나 꺽쇠(&gt;)로 구분처리 합니다. 이외에 가상 클래스 선택자(:), 인접 형제 선택자(-) 등이 있지만 생략하였습니다.아래처럼 class와 id 속성을 p태그에 적용 시킨 뒤, CSS 파일에서 선택자를 이용하면 해당 태그를 찾을 수 있습니다.&lt;div class=\"container\"&gt; &lt;p class=\"content\"&gt;&lt;/p&gt; &lt;p id=\"title\"&gt; &lt;span&gt; test &lt;/span&gt; &lt;/p&gt;&lt;/div&gt;.container .content { color: blue;}#title span { color: red;}.container .content선택자는 클래스 이름이 container인 코드의 자식 중 클래스 이름이 content인 코드를 찾는 선택자 입니다.#title span 선택자는 ID가 title인 코드의 자식 중 태그 이름이 span인 요소를 찾는 선택자 입니다.이를 응용하면, 좀 더 복잡한 코드 내에서 원하는 css를 찾을 수 있습니다. 잘 작성된 CSS 코드는 이러한 선택자를 잘 이용하여 재사용이 가능하도록 설계한 코드입니다.아래는 html에서 클래스를 다중 부여하여 스타일링 코드입니다.&lt;div&gt; &lt;button class=\"btn\"&gt;버튼&lt;/button&gt; &lt;button class=\"btn clicked\"&gt;버튼&lt;/button&gt;&lt;/div&gt;.btn { width: 100px; height: 100px; background-color: black; color: white;}.clicked { background-color: gray;}셀렉터(선택자)의 우선순위그렇다면 class와 style 등 여러 요소가 겹치는 경우에는 어떻게 적용될까요?이런 경우에는 셀렉터의 우선순위를 비교해서 우선순위가 높은 순서대로 적용이 됩니다.우선순위는 아래와 같습니다.인라인 스타일 -&gt; style=\"\" (1000점) ID 선택자 -&gt; #id (100점) Class 선택자 -&gt; .class (10점) 유형 선택자 -&gt; p (1점) 이외에도 !important, 의사요소(:before)등 여러 요소가 있지만, 간단하게 배운 내용만 기입하였습니다.이러한 선택자들은 합연산으로 적용이되며, 계산 방식은 아래와 같습니다..content p.item {}/* 클래스 + 태그 + 클래스 = 10 + 1 + 10 = 21점 */#title p {}/* id + 태그 = 100 + 1 = 101 점; */ 만약 점수가 같을 시, 나중에 해석된(작성된) 스타일을 적용합니다.웹 레이아웃&lt;div&gt; 태그를 이용하여 웹 레이아웃을 작성 할 수 있습니다.해당 태그는 박스와 같은 역할을 수행합니다. 이러한 태그들을 여러번 사용하여 복잡한 구조의 웹 페이지 레이아웃을 제작 할 수 있습니다.div { margin: 20px; /* div 요소 밖의 여백 */ padding: 30px; /* div 요소 내부의 여백 */ border: 1px solid black; /* 테두리 굵기 */ border-radius: 5px; /* 테두리 둥글게 */} padding과 margin은 쉽게 비교하면 풍선으로 예를 들 수 있습니다.Padding은 풍선 내부의 부피가 커지는 것이고, maring은 풍선 밖에 거리가 늘어나는 것 입니다.Padding을 부여하게 되면 안에서 부피값이 증가하기에, 기존에 설정한 크기보다 좀 더 커지게 됩니다.border 속성도 마찬가지로 안에서 늘어나는 형식이기에 요소의 크기가 커집니다.이를 아래와 같은 코드를 이용하여 해결 할 수 있습니다..box { box-sizing: border-box; /* 박스의 폭은 border까지 포함 = 테두리 기준 */ box-sizing: content-box; /* 박스의 폭은 padding 안쪽 = 콘텐트 영역 */}&lt;margin&gt; &lt;padding&gt; 태그 같은 경우에는 상(top) 하(bottom) 좌(left) 우(right) 여백을 지정 할 수 있습니다.속성 값은 시계화면으로 돌아가며 순서대로 상단, 우측, 하단, 좌측 순이며 3가지 값만 지정한 경우에는 상단, 우측과 좌측, 하단 순입니다.2가지 값을 지정한 경우에는 상단과 하단, 좌측과 우측 그리고 1가지 값만 지정하면 모든 방향에 적용됩니다.div { margin: 10px 5px 15px 20px; /* 상 10px 우 5px 하 15px 좌 20px */ margin: 10px 15px 5px; /* 상 10px 좌, 우 15px 하 5px */ margin: 10px 5px; /* 상, 하 10px 좌, 우 5px */ margin: 10px; /* 상, 하, 좌, 우 10px */ margin-top: 10px; /* 특정 방향만 지정도 가능 */}알아두면 좋은 내용margin collapse박스끼리 만나게 되면 margin이 합쳐지는 현상을 margin collapse라고 합니다.외부에서 만나든 내부에서 만나든 서로 맞닿게 된다면 둘 중 더 큰 마진값으로 적용되게 됩니다.이를 방지하기 위해서 padding 값을 주어 해결할 수 있습니다.display: blockdiv, p, h1 등의 태그들은 기본적으로 박스 형태입니다(display: block;). 따라서, 별다른 설정없이 작성하게 된다면, 가로로 최대한 긴 형태의 박스 형태로 표현됩니다.display: inline, inline-block, flex 등의 특성을 부여하면 해당 문제를 해결 할 수 있습니다.부모 요소로부터의 상속(inherit)아래와 같은 상황에서 parent의 속성들은 상속되어 child에서 사용 할 수 있습니다.모든 속성이 상속되는 것은 아니고 글자 관련된 속성들은 대부분 상속 됩니다.&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;Hello World!&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;" }, { "title": "Vue.js 3.x 입문 - 01", "url": "/posts/Vue01/", "categories": "Vue, Setting", "tags": "Vue, HowTo, Front", "date": "2021-08-17 01:29:00 +0900", "snippet": "글을 시작하며,해당 포스팅은 아래의 강의를 참고하였습니다. 4시간만에 완벽하게 끝내는 Vue.js 입문 &amp; Vue.js 3.x 최신버전Vue 시작하기Vue 설치VsCode 상단 툴바에서 터미널을 실행시켜줍니다. 만약, VsCode가 설치되어 있지 않는다면 해당 링크를 통해서 홈페이지로 이동하여 설치 할 수 있습니다.이후 아래의 멍령어를 실행시켜 줍니다.vue --version해당 명령어는 설치되어있는 vue의 버젼을 확인하는 명령어 입니다. 저는 5.0.8버젼을 사용하고 있기에 ‘@vue/cli 5.0.8’와 같은 메세지가 출력되었습니다.만약, vue가 설치되어있지 않는다면 vue를 설치해야합니다.vue를 설치하기 위해서 먼저 Node.js를 설치해보도록 하겠습니다.Node.js는 해당 링크1를 통해서 공식 홈페이지에서 설치 할 수 있습니다. LTS나 Current 중 아무 버젼이나 설치하시면 됩니다.이렇게 설치가 완료되었다면, VsCode를 실행시킨 후 상단부에 있는 터미널을 실행시킵니다. 이후 아래의 명령어들을 실행시켜 vue를 설치해줍니다.npm install -g vuenpm install -g @vue/clivue cli까지 설치했으면 vue –version을 이용하여 vue가 잘 설치되었는지 확인합니다.이제 vue에서 사용 할 수 있는 확장프로그램을 설치해야 합니다. 에디터 왼쪽의 확장 탭을 선택하여 Vetur을 설치합니다.이렇게 기본 환경 설치는 끝났습니다.Vue 프로젝트 생성Vue 프로젝트 생성하는 법에 대해 알아보도록 하겠습니다.vue create project01위와 같은 명령어를 통해 프로젝트를 생성 할 수 있습니다. 해당 포스팅에서는 프로젝트 이름을 projcet01로 지정하여 작업하겠습니다.이제 Vue 프로젝트를 어떻게 생성할지 선택해야 하는데, 기본적으로 vue3과 vue2를 지원합니다. 키보드 위아래 버튼을 통해서 이동 할 수 있습니다.저희는 Manually select features를 이용하여 프로젝트를 생성하겠습니다. 해당 화면에서 선택은 스페이스바, 다음 화면으로 이동은 엔터를 사용합니다.Check the features needed for your projectBabel : 최신 스크립트를 구 버젼에서도 사용 할 수 있게 끔 변환TypeScript : TypeScript를 사용 시 체크해야함.Progressive Web App (PWA) Support : 모바일처럼 웹을 구현할 수 있게 만들어주는 기술Router : 메뉴를 구성 후 화면 이동이 가능하도록 만들어줌.Vuex : 모든 vue 컴포넌트에서 접근 가능한 저장소Linter / Formatter : 해당 프로젝트 내에서 동일한 코딩 규칙을 수행하도록 설정Choose a version of Vue.js that you want to start the project with이후 3.x 버젼 선택Use history mode for router?use history mode for router에서 y를 입력.Pick a linter / formatter configESLint는 문법을 체크해주는 역할. 여기서는 Standard config를 사용한다.Pick additional lint features: Lint on save이후 Lint on Save를 선택하여 저장 할 때 문법 체크를 수행한다.Where do you prefer placing config for Babel, ESLint, etc.?설정 옵션들을 별도의 옵션으로 관리를 하거나 package.json 하나로 관리Save this as a preset for future projects?프리셋 저장Save preset as:프리셋 이름 설정마지막으로 아래 명령어들을 입력하여 정상적으로 프로젝트가 생성되었는지 확인합니다. cd project01 npm run serveVue 프로젝트 구성내용" }, { "title": "Github Blog 만들기 -3", "url": "/posts/Github-pages-03/", "categories": "Blogging, Theme", "tags": "Github, HowTo, Jekyll, Chripy", "date": "2021-08-02 19:58:00 +0900", "snippet": "글을 시작하며이번 포스팅에서는 Jekyll Theme 중 해당 블로그에서 사용하고 있는 Chripy Theme을 예제로 가져와 해당 Theme를 블로그에 적용하는 것을 시작으로 자신의 블로그에 맞게 설정하는 방법까지 알아보고자 합니다.Github 블로그에서 사용하고 있는 수많은 Jekyll Theme를 자신의 블로그에 적용하는 방법은 저마다 다르지만, 큰 틀은 비슷하므로 Chripy theme가 아니더라도 비슷한 맥락으로 다른 Theme에서도 적용할 수 있으리라 생각됩니다.Theme 설치Download먼저 Chripy Theme을 다운로드하여 자신의 Local repository에 설치하여야 합니다.링크를 클릭 시 Chripy Theme의 Github repository로 이동하게 되는데, 상단 오른편에 있는 초록색 Code를 클릭 후 Download Zip을 이용하여 다운 후 자신의 repository 폴더에 붙여넣기 해줍니다. 개인적으로는 repository 내 .git 폴더를 제외한 나머지를 모두 삭제 후 붙여넣는 것을 추천드립니다.붙여넣기를 완료했다면 ruby prompt를 열어 Jekyll local Server을 작동하여 Theme가 올바르게 적용 되었는지 확인합니다.bundle exec jekyll s설치 성공 화면올바르게 설치를 완료했다면 localhost:4000을 url에 입력하여 위와 같은 화면이 표시되는지 확인합니다.정상적으로 화면이 출력된다면 이제 Github Desktop을 들어가서 Push &amp; Commit을 합니다.Deploy--- layout: home # Index page ---하지만 예제로 사용하는 Chripy Theme에서는 Jekyll 화면과는 다르게 Github 블로그 화면에서는 위와 같이 오류 화면을 출력하는 것을 확인 할 수 있습니다.해당 오류는 Chripy Theme가 다른 Theme와는 다르게 Main Branch 에서 Deploy를 시키는 것이 아니라 추가적으로 Branch를 생성하여 Deploy를 하여 블로그 페이지를 생성하기 때문입니다. 좀 더 자세한 내용은 개발자 가이드 페이지 에서 확인 할 수 있습니다.그렇기에 Github 블로그를 생성하기 위해서는 아래와 같은 과정을 거쳐야 합니다. .github/workflows에 있는 pages-deploy.yml.hook파일을 pages-deploy.yml로 이름 수정하기. pages-deploy.yml의 4-5번째 줄에 있는 branches: master에서 master을 main으로 수정하기. Commit &amp; Push 후 Repository에서 Actions 탭에서 Deploy가 성공 했는지 확인하기. Repository에서 Settings &gt; Pages &gt; Branch을 gh-pages로 수정 후 Save 하기.해당 과정을 수행하고 나면 정상적으로 Github Page가 표시되는 것을 확인 할 수 있습니다.Theme 수정_config.yml이제 Github Page에 정상적으로 블로그가 생성된 것을 확인했으면 다시 Local Repository로 돌아와 세부적인 수정을 하도록 하겠습니다.블로그 이름, 언어 설정 등등 기본적인 수정사항은 모두 _config.yml에서 설정이 가능합니다._config.yml 파일 내부에 주석으로 자세하게 설명이 되어 있으므로 이 부분은 따로 설명하지 않고 넘어가겠습니다.Comments 추가하기해당 Theme에서는 disqus, giscus, utterancse 3가지 댓글 기능을 지원하고 있습니다.각각 해당하는 링크를 참조하여 계정 생성을 하신 뒤 active 옆에 활성화 하고 싶은 댓글을 적으신 뒤 해당 댓글에 가서 관련 값들을 입력하시면 활성화가 됩니다.마무리,Chripy Theme를 적용하면서 어려움을 겪었기에 해당 문제를 겪는 분들에게 도움이 되고자 간략하게 글을 적어두었습니다.좀 더 자세하게 적지 못한 부분은 추후에 수정을 할 예정입니다만 혹시 저와 같은 어려움을 겪어 Github에 Deploy를 실패하여 포기하시는 분들이 계실 까봐 초안을 업로드 해둡니다.감사합니다." }, { "title": "Github Blog 만들기 -2", "url": "/posts/Github-pages-02/", "categories": "Blogging, Jekyll", "tags": "Github, HowTo, Jekyll, Ruby", "date": "2021-07-27 20:35:00 +0900", "snippet": "글을 시작하며저번 포스팅에서 Github 블로그를 성공적으로 개설 후 개인 작업환경에서 글을 쓰고 Github DeskTop을 이용하여 자신의 Github 블로그에 포스팅 하였습니다.하지만 아직 블로그라기에는 어딘가 조금 많이 부족해 보입니다. 이번 포스팅에서는 블로그에 여러 기능들을 추가하고 꾸미는 작업을 하겠습니다.블로그를 꾸미기 위해 저희는 Jekyll이라는 정적 웹 페이지 생성기를 사용할 계획입니다. Jekyll은 Html/Markdown으로 작성한 글을 레이아웃에 맞춰 웹 페이지로 생성해주는 프레임워크입니다.ex) 정적 웹 페이지 vs 동적 웹 페이지그렇다면 정적 웹 페이지는 무엇일까요?웹은 크게 두가지로 나뉩니다. 정적(Static) 웹과 동적(Dynamic) 웹 입니다.먼저, 정적 웹은 말 그대로 고정되어 있는 웹 페이지 입니다. 개발자가 작성한 Html/Css/JavaScript 같은 코드들을 그대로 전달하여 클라이언트의 브라우저에서 보여주는 웹 페이지이죠.해당 특성때문에 오해할 수도 있는데 정적 웹 페이지라 하여 매번 꼭 똑같은 화면을 보여주지는 않습니다.랜덤 함수나 현재 시간과 같은 내용들을 이용하여 페이지를 구성하면 매번 같은 내용의 코드를 전달하더라도 사용자는 다른 화면을 보게 될 수 있기 때문입니다.그렇다면 동적 웹 페이지는 어떨까요? 동적 웹 페이지는 상황에 따른 다양한 화면을 표시하는 웹페이지 입니다.대표적인 예로 매번 새로운 게시글이 올라오는 SNS가 있습니다. 개발자가 새로운 게시물이 올라올 때 마다 일일이 코드를 수정하는 것이 아니라 서버가 알아서 데이터 베이스를 거쳐 값들을 가져와 사용자에게 업데이트 된 화면을 보여주게 됩니다.정리하자면, 정적 웹 페이지는 개발자가 미리 만들어둔 코드들로 이미 구성 되어있는 페이지이고 동적 웹 페이지는 호출될 때 마다 데이터 베이스로부터 데이터들을 가져와 서버가 페이지를 재구성하는 형태입니다.따라서 매번 새로운 내용들을 표시해야 되는 주식, 날씨, SNS와 같은 내용의 페이지는 동적 웹 페이지를 이용하는 것이 유리하고 매번 같은 내용을 표시하는 학교나 회사의 소개글, 블로그 같은 경우에는 쉽고 빠른 정적 웹 페이지를 이용하는 것이 효과적일 수 있겠죠.Ruby &amp; Jekyll1. Ruby 설치하기이제 왜 정적 웹 페이지 생성기인 Jekyll을 사용해야 하는지 이해했다면 Jekyll을 설치해보겠습니다. Jekyll은 프로그래밍 언어인 Ruby를 통해 제작되었으므로 먼저 Ruby를 설치해야 합니다.저는 [Ruby 공식 사이트][1]에서 현재 최신 버전인 Ruby+Devkit 3.1.2-1 (x64)을 받아 사용하였습니다.Start Ruby정상적으로 설치를 완료하였다면, 왼쪽 아래 윈도우 검색창에서 ruby를 검색하여 Start Command Prompt with Ruby라는 앱을 실행 할 수 있습니다.2. Jekyll 설치하기이후 아래와 같은 명령어를 Prompt에 순차적으로 입력하여 jekyll을 설치해 줍니다. gem install jekyll bundler gem install webrick gem은 ruby언어에서 자동으로 프로그램을 받도록 도와주는 패키지 시스템입니다.이후 자신의 로컬 repository로 이동해야 합니다. 해당 repository 주소는 VSCode에서 저번에 생성한 index.html을 우클릭 하여 파일 탐색기에서 표시를 클릭하여 확인할 수 있습니다.Find Local Repository Path또는, Github Desktop에서 Current repository를 클릭 후 밑에 보이는 repository에 커서를 가져다 대고 있거나 우클릭 하여 Show in Explorer으로 확인 할 수 있습니다.이렇게 로컬 repository 주소를 확인 하였다면 다시 Prompt로 돌아와 “cd {repository 주소}” 명령어를 입력해 줍니다. 저는 저의 repository 주소가 C:\\Users\\Hin6150\\Documents\\GitHub\\hino61500.github.io 이므로 아래와 같이 입력하였습니다.cd C:\\Users\\Hin6150\\Documents\\GitHub\\hino61500.github.io만약 해당 경로에 한글이 존재한다면, cd 명령어 입력 후 chcp 65001 입력하여 “Active code page: 65001”가 출력되는지 확인합니다. chcp 65001는 utf-8로 인코딩 시키는 명령어 입니다.이렇게 repository로 이동하였다면 이제 해당 위치에 Jekyll 폴더를 생성해야 합니다. 설치 명령어는 아래와 같습니다.jekyll new ./만약 Conflict: C:/Users/Hin6150/Documents/GitHub/hino61500.github.io exists and is not empty.와 같은 에러가 출력된다면 해당 폴더에 .git을 제외한 파일들을 삭제하거나 jekyll new ./ –trace를 입력하여 해결합니다.이후 아래와 같은 명령어를 순차적으로 실행한다면 Jekyll 설치는 끝났습니다.bundle installbundle add webrick3. 실행 확인마지막으로 아래와 같은 명령어를 실행하여 서버가 정상적으로 실행되는지 확인해야 합니다.bundle exec jekyll server아래와 같은 메세지가 출력되었다면 localhost:4000을 url에 입력하여 서버가 설치되었는지 확인해봅시다. Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop.Jekyll 설치 성공 화면이렇게 정상적으로 표시되었다면 성공입니다! Jekyll이 자신의 Local 환경에 정상적으로 설치된 것 입니다.이제 Github Desktop으로 가서 Commit to main을 클릭하여 자신의 Github 블로그에서도 해당 화면이 보이는지 확인해봅시다. 여러개의 수정사항을 commit 할 시 수정내용을 입력해야 commit이 가능해집니다.3. Jekyll 테마 적용하기Jekyll에는 여러가지 테마들이 존재합니다. http://jekyllthemes.org/ https://jekyllthemes.io/free http://themes.jekyllrc.org/ https://jamstackthemes.dev/ssg/jekyll/ https://github.com/topics/jekyll-theme해당 블로그는 [jekyll-theme-yat][2]이라는 테마를 사용하다 현재 [jekyll-theme-chirpy][3]으로 사용 중 입니다.어떤 테마를 선택하던지 기본적인 큰 틀은 똑같지만 자신이 구현하고자 하는 디자인이나 기능들이 포함되어 있는 테마로 블로그를 시작한다면 좀 더 수월하게 자신이 원하는 방향으로 블로그를 만들 수 있습니다. 테마는 개인이 만들어 배포하는 것이므로 자잘한 오류들이 포함되어 있을 수 있습니다.자신이 원하는 테마를 찾았다면 Download 또는 Github 링크가 존재할 것입니다.Github에서 Theme 받기Github 링크 같은 경우에는 해당 링크로 이동 한 뒤에 초록색 Code 버튼을 눌러 Download Zip을 선택하여 다운로드 하시면 됩니다.해당 화면이 보이지 않는 경우 Repositories로 이동 후 찾으셨던 theme을 선택하셔서 다운로드 하시면 됩니다.이후 해당 Zip파일을 압축해제하여 자신의 Local Repository로 붙여넣기를 수행하면 같은 파일이 있다는 경고문이 뜨는데, 이때 같은 파일은 덮어쓰기로 처리합니다.마지막으로 prompt에서 아래 명령어를 입력 후 정상적으로 Jekyll 서버가 작동 하는지 확인합니다.bundle install 서버 작동 명령어는 bundle exec jekyll s 입니다.서버가 정상적으로 작동하는 것 또한 확인했다면 자신의 Github 블로그에 Commit을 통해 블로그에서도 정상적으로 작동이 되었는지 확인합니다.마무리만약 2-3 과정에서 정상적으로 서버가 구동되었지만, 테마를 적용하는 과정에서 오류 화면이 나왔다면 Theme 문제일 가능성이 높습니다. 다른 Theme을 구하시거나 문제가 되는 부분을 해결하시면 정상적으로 작동 될 것입니다.Jekyll 서버 구동에 실패했다면 Ruby Terminal에서 오류 메시지를 확인하고 Github Page를 생성하는데 실패했다면 Github Repository에서 Actions 탭을 확인하시면 오류 해결에 도움이 되리라 생각됩니다." }, { "title": "Github Blog 만들기 -1", "url": "/posts/Github-pages-01/", "categories": "Blogging, Github", "tags": "Github, Git, HowTo", "date": "2021-07-14 18:32:00 +0900", "snippet": "글을 시작하며,Github Page를 이용하여 블로그를 만들면서 나름대로 찾아본 내용들을 정리하여 공유하고자 합니다.해당 포스팅에서는 Github Page를 생성한 뒤 Github Desktop을 이용하여 간단한 html 예제 파일을 push 하는 방법을 다룰 예정입니다.Github_Remote Repository1. Repository 만들기먼저 블로그를 만들기 위해서는 Github 계정과 해당 블로그를 작업할 저장소(Repository)가 필요합니다.자신의 Github에서 Repositories 항목을 찾을 수 있는데, 이것은 Git으로 관리하는 프로젝트 저장소를 뜻하며 말 그대로 파일이나 폴더 등을 저장해 두는 장소 입니다.New Repository위 사진과 같이, Github메인 화면에서 + 아이콘을 클릭해 새로운 저장소를 생성 할 수 있습니다.Github Page에서는 프로젝트, 사용자, 단체의 3가지 종류의 사이트를 제공 하고 있습니다.하지만 저희가 작업하는 환경은 개인용 블로그이므로, 사용자 Page를 생성하여 사용할 계획입니다. Github Pages에 대한 더 자세한 설명은 해당 링크에서 확인 할 수 있습니다.Create Repository사용자 page를 만들기 위해서는 Repository name을 {owner}.github.io와 같은 형식으로 설정하면 됩니다.예제에서는 owner이 hin61500이므로, hin61500.github.io을 입력하게 됩니다.그리고 Public으로 설정 후 Readme.md 파일을 추가 선택을 하고 아래의 Create Repository 버튼을 클릭하여 저장소를 생성 해 줍니다.2. Github Page 생성이제 이렇게 생성된 Repository가 웹상에서 확인 할 수 있는 퍼블리싱(Publishing) 작업이 잘 수행되었는지 확인해야 합니다.Page PublishingSetting &gt; Pages로 이동 후 Your site is ready to be published at https://hino61500.github.io/와 같은 문구가 출력되는지 확인 후 해당 링크로 이동하여 정상적으로 화면이 표시되는지 확인합니다. Repository 생성 후 Page가 생성되기까지 10분정도 소요될 수 있습니다.성공 화면만약 404 에러 화면 대신 {owner}.github.io 문구가 출력이 된다면 정상적으로 웹상에 퍼블리싱 된 것입니다. Readme.md 파일을 생성하지 않은 경우 다르게 표시 될 수 있습니다.ex) GitHub vs Git?다음 단계는 생성된 저장소에 우리가 만들고자 하는 블로그에 해당하는 파일을 보내주는 것 입니다.다만, 해당 단계에 들어가기 전에 앞서 Github와 Git이 무엇인지 간단하게 확인하고 넘어가도록 하겠습니다.Git은 분산 버전 관리 시스템이라 불립니다. 풀어서 설명하자면, Git은 저장소에 있는 파일의 변화를 추적합니다.언제, 누가, 무엇을, 어떻게, 왜 변화를 주었는지 24시간 확인하고 해당 변화를 저장합니다.그렇기에 사용자는 언제든지 파일이 변한 시점으로 돌아가는 것이 가능합니다.쉽게 말해서, 파일최종최종_최종과 같은 작업을 하지 않아도 된다는 점이죠.또한, Git은 하나의 파일에 대한 다양한 가지들을 생성하여 한번에 관리 할 수 있도록 도와줍니다.하나의 파일에서 여러가지 다른 상황들을 독립적으로 저장이 가능할 뿐만 아니라, 여러 상황들에서 공통된 부분을 한번에 관리 또한 가능하죠.이러한 특징은 다양한 사람들과 협업을 하는 경우에 개개인이 공통된 프로젝트의 독립적인 버전을 보유 하면서 전체 프로젝트의 관리를 용이하게 도와줍니다.분산 버전 관리 시스템은 위와 같은 Git의 특징들을 사용하여 팀프로젝트를 중앙 서버를 통하지 않고 개개인의 작업 환경에서 코드 작업이 가능하도록 도와주는 시스템입니다.그렇다면 Github란 무엇일까요? Github는 Git을 지원하는 호스팅 플랫폼 입니다.우리는 Github를 이용하여 Git을 이용하는 프로젝트들을 여러 다른 사람들과 작업 할 수 있는 것이죠.ex) Local » Remote자, 여기까지 이해를 하였다면 다음 단계로 수행하는 작업이 무엇인지 감이 올 것입니다.우리는 Github에 Repository를 만들어 Github Page를 생성하였습니다. 즉 호스팅 플랫폼인 Github내에 원격(Remote) 저장소가 존재하는 셈이죠.이러한 원격 저장소에서 작업을 하는 것은 즉각적인 피드백이 어려우므로 개개인의 작업 환경인 Local 저장소에서 작업 후 Remote 저장소로 보내주는 작업이 훨씬 효율적입니다.따라서 Commit(Local 저장소 변경 사항 저장) &amp; Push(Local &gt; Remote)를 통해 블로그를 꾸미고, 글을 쓰는 작업들을 진행하는 것이 좋습니다.Local Repository1. Github Desktop, VsCode 설치Commit &amp; Push를 위한 툴로 저희는 Github Desktop와 VsCode를 설치하여 사용 할 예정입니다.Github Desktop은 Git을 잘 모르더라도 Commit와 Push를 손쉽게 수행 할 수 있도록 도와주는 프로그램이고, VsCode는 사용자로 하여금 개인 작업환경에서 원활하게 작업을 할 수 있도록 도와주는 역할을 합니다. 자신이 편한 작업 환경이 있다면, 해당 환경에서 진행해도 괜찮습니다.Github Desktop먼저, Github Desktop을 정상적으로 설치 후 자신의 Github 계정과 연동하였다면 위와와 같은 화면이 보일 것 입니다.해당 화면은 자신의 Github계정의 Repositories를 보여주는데, 이 중 작업할 Repository를 선택하여 Clone 합니다. Clone 버튼은 Your repositories 밑에 있는 저장소를 클릭 시 생깁니다.Clone a Repository클릭 시 위와 같은 화면이 표시되는데, 해당 작업은 Github에 올라와 있는 Repository를 자신의 개인 환경에 복사한 뒤 Github Desktop으로 하여금 추척 하도록 설정하는 작업입니다. 즉, Remote 저장소의 내용을 가져와 Local Repository를 생성하는 작업입니다.Clone을 성공적으로 하였다면, Github Desktop은 실시간으로 Local Repository의 변화를 감지하고 Remote Repository와의 차이점을 확인 할 것입니다. 위에서 설명한 Git의 역할과 유사합니다.VsCode 또한 정상적으로 설치되었다면 첫번째 메뉴에 Open in Visual Studio Code 탭이 보일 것 입니다.만약 보이지 않는다면 Select your editor in Options에서 에디터를 선택 할 수 있습니다.2. Commit &amp; Push자, 1장의 마지막 단계입니다.이제 저희는 Local Repository에 index.html이라는 파일을 생성하여 블로그의 첫 화면을 수정 할 것입니다.Create index.html먼저, VsCode를 열어 Local Repository 폴더 안에 index.html 파일을 생성합니다.&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;example HTML&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;H2&gt;example HTML&lt;/H2&gt; &lt;HR&gt; example HTML &lt;/body&gt;&lt;/html&gt;저는 위와 같은 간단한 예제 코드들을 이용하여 html을 구성하였습니다.CommitGithub Desktop에서 Local Repository의 변경사항인 index.html이라는 파일이 새로 생겼다는 것을 확인 할 수 있습니다. 만약, Github Desktop에서 This file is empty가 떠있다면, index.html 파일을 저장해주세요.이후, Commit to main 버튼을 이용하여 Local Repository의 변경사항을 저장 할 수 있습니다.Push그리고 Push to Origin 버튼을 통해서 해당 변경사항을 Remote Repository인 Github로 전송 할 수 있습니다.이제 자신의 Github page 주소로 이동하면 변경된 블로그를 확인 할 수 있습니다!마무리하며,틀리거나 미흡한 부분이 있다면 언제든지 지적해주세요!또한, 해당 포스팅을 따라 진행하던 도중 어려운 부분이나 막히는 부분이 생기면 답글 달아주세요.최대한 도와드리도록 노력하겠습니다!" } ]
