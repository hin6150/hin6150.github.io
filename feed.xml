<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hin6150.github.io/</id><title>Shinak's Dev Blog</title><subtitle>공부한 내용들을 간략하게 정리하여 업로드 하고 있습니다.</subtitle> <updated>2023-05-28T23:27:57+09:00</updated> <author> <name>Shinak</name> <uri>https://hin6150.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hin6150.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hin6150.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Shinak </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title></title><link href="https://hin6150.github.io/posts/2023-05-18-Spring-Boot-01/" rel="alternate" type="text/html" title="" /><published>2023-05-28T23:27:57+09:00</published> <updated>2023-05-28T23:27:57+09:00</updated> <id>https://hin6150.github.io/posts/2023-05-18-Spring-Boot-01/</id> <content src="https://hin6150.github.io/posts/2023-05-18-Spring-Boot-01/" /> <author> <name>Shinak</name> </author> <summary> 미리보기 start.spring.io를 통해 간편하게 스프링 부트를 시작 할 수 있음. 스프링 부트 3.0 이상 부터는 Java 17 필요. static/index.html 을 올려두면 Welcome page 기능을 제공한다. Controller을 통해 스프링 부트 제어가능. 이후 getMapping(url)을 통해 특정 url 감지 return “값”을 통해 static/값.html 반환 관련 Controller이 존재하지 않으면 Mapping(url)으로 자동으로 이동. @ResponsiveBody의 경우 HTTP의 BODY에 문자 내용을 직접 반환 기존에는 viewResolver가 실행되는 반면, ResponsiveBody의 경우 HttpMessageConverter가 동작. Optio... </summary> </entry> <entry><title></title><link href="https://hin6150.github.io/posts/2023-05-15-React-01/" rel="alternate" type="text/html" title="" /><published>2023-05-28T23:27:57+09:00</published> <updated>2023-05-25T22:33:33+09:00</updated> <id>https://hin6150.github.io/posts/2023-05-15-React-01/</id> <content src="https://hin6150.github.io/posts/2023-05-15-React-01/" /> <author> <name>Shinak</name> </author> <summary> 리엑트란? 리엑트를 사용하는 이유는 Single Page Application(SPA)때문이라고 합니다. 간단하게 이야기하면 오직 하나의 HTML을 사용한다는 겁니다. 그렇기에 페이지에 변화가 생긴다면 단순히 해당 부분에 대한 변경을 통해 별도의 새로고침 없이 페이지의 내용을 변경해줍니다. 또한, JSX라는 문법을 통해서 쉽고 간편하게 html을 보관할 수 있습니다. 리엑트 설치 해당 [링크][0]에서 Node.Js LTS 버전을 설치합니다. 해당 [링크][1]에서 vsCode 에디터를 설치합니다. 앞으로 리엑트를 개발할 폴더를 생성합니다. 해당 폴더를 vsCode 에디터에서 엽니다. 상단에 있는 Terminal -&amp;gt; New Terminal을 통해 터미널을 엽니다. ... </summary> </entry> <entry><title>Typescript 01</title><link href="https://hin6150.github.io/posts/TypeScript-01/" rel="alternate" type="text/html" title="Typescript 01" /><published>2023-05-28T00:00:00+09:00</published> <updated>2023-05-28T00:00:00+09:00</updated> <id>https://hin6150.github.io/posts/TypeScript-01/</id> <content src="https://hin6150.github.io/posts/TypeScript-01/" /> <author> <name>Shinak</name> </author> <summary> Typescript 자바스크립트에서는 5 - ‘3’과 같은 연산이 가능합니다. JS에서 간편하게 알맞은 타입으로 변환시켜주기에, 엄격하게 타입을 설정하지 않고 사용이 가능합니다. 다만, 이런 방식은 JS조차 무슨 이유로 에러가 발생하였는지 확실하게 알지 못하기에 프로젝트가 커질 수록 장점이 아닌, 단점으로 적용합니다. 그렇기에 타입스크립트에서는 5 - ‘3’과 같은 연산이 불가능하지만, 명확하지 않은 타입에서 “숫자와 문자의 연산은 불가능 합니다.”와 같이 명확하게 문제점을 알려줍니다. 리엑트에서 타입 스크립트 사용하기 npx create-react-app 프로젝트명 –template typescript </summary> </entry> <entry><title>JavaScript 입문 2</title><link href="https://hin6150.github.io/posts/Javascript-02/" rel="alternate" type="text/html" title="JavaScript 입문 2" /><published>2023-05-08T07:57:20+09:00</published> <updated>2023-05-16T19:43:40+09:00</updated> <id>https://hin6150.github.io/posts/Javascript-02/</id> <content src="https://hin6150.github.io/posts/Javascript-02/" /> <author> <name>Shinak</name> </author> <category term="Web" /> <category term="JavaScript" /> <summary> querySelectorAll() 기존 querySelector을 이용해 하나의 요소를 가져올 수 있었습니다. 그렇다면, query에 선택되는 요소들을 모두 가져오려는 경우는 어떻게 할까요? 네 맞습니다. querySelectorAll을 이용해 가져오면 되겠죠. 다만 querySelectorAll을 배우기 전에 먼저 querySelector을 이용해 수정을 적용하는 방법에 대해서 알아봐야 합니다. 우리는 document에 querySelctor을 적용해 특정 요소를 가져옵니다. 이후 해당 요소에 .style과 같은 값을 변경하게 되죠. 그렇다면, 마찬가지로 querySelectorAll을 이용해 모두 가져와 변경하려면 가져온 요소들에 .style값을 변경하면 될까요? 정답은 ‘아니다’입니다. ... </summary> </entry> <entry><title>JavaScript 입문 1</title><link href="https://hin6150.github.io/posts/Javascript-01/" rel="alternate" type="text/html" title="JavaScript 입문 1" /><published>2023-05-04T16:11:23+09:00</published> <updated>2023-05-14T18:56:36+09:00</updated> <id>https://hin6150.github.io/posts/Javascript-01/</id> <content src="https://hin6150.github.io/posts/Javascript-01/" /> <author> <name>Shinak</name> </author> <category term="Web" /> <category term="JavaScript" /> <summary> 많은 사람들이 FrontEnd의 기초는 HTML,CSS 그리고 JavaScript를 이야기합니다. 해당 포스팅에서는 HTML과 CSS를 어느정도 배운 사람이 JavaScript에 대해 입문하려는 경우 도움이 될 내용을 작성했습니다. JavaScript란? 간단하게 JavaScript는 HTML과 CSS에 행동을 부여해주는 역할을 합니다. HTML을 통해 뼈대를 만들고, CSS를 통해 뼈대를 꾸민 뒤, JavaScript에서 움직일 수 있게 처리해주는 것 입니다. 자, 그러면 본격적으로 JavaScript를 사용하기 전에 먼저 개발환경을 설치해주겠습니다. 해당 포스팅에서는 VsCode를 기준으로 진행하였습니다. 개발환경 설치 먼저 해당 링크에서 본인의 운영체제에 맞게 VsCode를 설치해준 뒤,... </summary> </entry> </feed>
